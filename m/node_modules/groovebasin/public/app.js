(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['library'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <ul>\n    ";
  foundHelper = helpers.artists;
  stack1 = foundHelper || depth0.artists;
  tmp1 = self.program(2, program2, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  if(foundHelper && typeof stack1 === functionType) { stack1 = stack1.call(depth0, tmp1); }
  else { stack1 = blockHelperMissing.call(depth0, stack1, tmp1); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </ul>\n";
  return buffer;}
function program2(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n      <li>\n        <div class=\"artist expandable\" id=\"";
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  foundHelper = helpers.artistid;
  stack2 = foundHelper || depth0.artistid;
  if(typeof stack2 === functionType) { stack1 = stack2.call(depth0, stack1, { hash: {} }); }
  else if(stack2=== undef) { stack1 = helperMissing.call(depth0, "artistid", stack1, { hash: {} }); }
  else { stack1 = stack2; }
  buffer += escapeExpression(stack1) + "\">\n          <div class=\"ui-icon ui-icon-triangle-1-e\"></div>\n          <span>";
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  stack2 = helpers['if'];
  tmp1 = self.program(3, program3, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(5, program5, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</span>\n        </div>\n        <ul></ul>\n      </li>\n    ";
  return buffer;}
function program3(depth0,data) {
  
  var stack1;
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "name", { hash: {} }); }
  return escapeExpression(stack1);}

function program5(depth0,data) {
  
  
  return "[Unknown Artist]";}

function program7(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <p class=\"ui-state-highlight ui-corner-all\">\n    <span class=\"ui-icon ui-icon-info\"></span>\n    <strong>";
  foundHelper = helpers.empty_library_message;
  stack1 = foundHelper || depth0.empty_library_message;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "empty_library_message", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</strong>\n  </p>\n";
  return buffer;}

  foundHelper = helpers.artists;
  stack1 = foundHelper || depth0.artists;
  stack2 = helpers['if'];
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(7, program7, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;});
templates['chat_list'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <li>\n      <span class=\"";
  foundHelper = helpers['class'];
  stack1 = foundHelper || depth0['class'];
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "class", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">";
  foundHelper = helpers.user_name;
  stack1 = foundHelper || depth0.user_name;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "user_name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</span>: ";
  foundHelper = helpers.message;
  stack1 = foundHelper || depth0.message;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "message", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\n    </li>\n  ";
  return buffer;}

  buffer += "<ul>\n  ";
  foundHelper = helpers.chats;
  stack1 = foundHelper || depth0.chats;
  stack2 = helpers.each;
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n";
  return buffer;});
templates['settings'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n      <input type=\"text\" id=\"auth-password\" placeholder=\"password\" />\n      <button class=\"auth-save\">Save</button>\n      ";
  foundHelper = helpers.auth;
  stack1 = foundHelper || depth0.auth;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.password);
  stack2 = helpers['if'];
  tmp1 = self.program(2, program2, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;}
function program2(depth0,data) {
  
  
  return "\n        <button class=\"auth-cancel\">Cancel</button>\n      ";}

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      Using password <em>";
  foundHelper = helpers.auth;
  stack1 = foundHelper || depth0.auth;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.password);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "auth.password", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</em>\n      <button class=\"auth-edit\">Edit</button>\n      <button class=\"auth-clear\">Clear</button>\n    ";
  return buffer;}

function program6(depth0,data) {
  
  
  return "\n      <li>Reading the library, current playlist, and playback status</li>\n    ";}

function program8(depth0,data) {
  
  
  return "\n      <li>Adding songs, loading playlists, and uploading songs.</li>\n    ";}

function program10(depth0,data) {
  
  
  return "\n      <li>Control playback state, and manipulate playlists.</li>\n    ";}

function program12(depth0,data) {
  
  
  return "\n      <li>Deleting songs, updating tags, organizing library.</li>\n    ";}

function program14(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n    <p>\n      Authenticated as\n      <a href=\"http://last.fm/user/";
  foundHelper = helpers.lastfm;
  stack1 = foundHelper || depth0.lastfm;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.username);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "lastfm.username", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">";
  foundHelper = helpers.lastfm;
  stack1 = foundHelper || depth0.lastfm;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.username);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "lastfm.username", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</a>.\n      <button class=\"signout\">Sign out</button>\n    </p>\n    <p>\n      Scrobbling is <input type=\"checkbox\" id=\"toggle-scrobble\"";
  foundHelper = helpers.lastfm;
  stack1 = foundHelper || depth0.lastfm;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.scrobbling_on);
  stack2 = helpers['if'];
  tmp1 = self.program(15, program15, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "><label for=\"toggle-scrobble\">";
  foundHelper = helpers.lastfm;
  stack1 = foundHelper || depth0.lastfm;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.scrobbling_on);
  stack2 = helpers['if'];
  tmp1 = self.program(17, program17, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(19, program19, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</label>\n    </p>\n  ";
  return buffer;}
function program15(depth0,data) {
  
  
  return " checked=\"checked\"";}

function program17(depth0,data) {
  
  
  return "On";}

function program19(depth0,data) {
  
  
  return "Off";}

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <p>\n      <a href=\"";
  foundHelper = helpers.lastfm;
  stack1 = foundHelper || depth0.lastfm;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.auth_url);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "lastfm.auth_url", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">Authenticate with Last.fm</a>\n    </p>\n  ";
  return buffer;}

  buffer += "<div class=\"section\">\n  <h1>Authentication</h1>\n  <p>\n    ";
  foundHelper = helpers.auth;
  stack1 = foundHelper || depth0.auth;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.show_edit);
  stack2 = helpers['if'];
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(4, program4, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </p>\n  <h2>Permissions</h2>\n  <ul>\n    ";
  foundHelper = helpers.auth;
  stack1 = foundHelper || depth0.auth;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.permissions);
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.read);
  stack2 = helpers['if'];
  tmp1 = self.program(6, program6, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  foundHelper = helpers.auth;
  stack1 = foundHelper || depth0.auth;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.permissions);
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.add);
  stack2 = helpers['if'];
  tmp1 = self.program(8, program8, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  foundHelper = helpers.auth;
  stack1 = foundHelper || depth0.auth;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.permissions);
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.control);
  stack2 = helpers['if'];
  tmp1 = self.program(10, program10, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  foundHelper = helpers.auth;
  stack1 = foundHelper || depth0.auth;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.permissions);
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.admin);
  stack2 = helpers['if'];
  tmp1 = self.program(12, program12, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </ul>\n</div>\n<div class=\"section\">\n  <h1>Last.fm</h1>\n  ";
  foundHelper = helpers.lastfm;
  stack1 = foundHelper || depth0.lastfm;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.username);
  stack2 = helpers['if'];
  tmp1 = self.program(14, program14, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(21, program21, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</div>\n";
  return buffer;});
templates['playlist'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  ";
  foundHelper = helpers.playlist;
  stack1 = foundHelper || depth0.playlist;
  tmp1 = self.program(2, program2, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  if(foundHelper && typeof stack1 === functionType) { stack1 = stack1.call(depth0, tmp1); }
  else { stack1 = blockHelperMissing.call(depth0, stack1, tmp1); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;}
function program2(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n    <div class=\"pl-item\" id=\"playlist-track-";
  foundHelper = helpers.id;
  stack1 = foundHelper || depth0.id;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "id", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\" data-id=\"";
  foundHelper = helpers.id;
  stack1 = foundHelper || depth0.id;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "id", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">\n      <span class=\"track\">";
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.track);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "track.track", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</span>\n      <span class=\"title\">";
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.name);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "track.name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</span>\n      <span class=\"artist\">";
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.artist_name);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "track.artist_name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</span>\n      <span class=\"album\">";
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.album_name);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "track.album_name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</span>\n      <span class=\"time\">";
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.time);
  foundHelper = helpers.time;
  stack2 = foundHelper || depth0.time;
  if(typeof stack2 === functionType) { stack1 = stack2.call(depth0, stack1, { hash: {} }); }
  else if(stack2=== undef) { stack1 = helperMissing.call(depth0, "time", stack1, { hash: {} }); }
  else { stack1 = stack2; }
  buffer += escapeExpression(stack1) + "</span>\n    </div>\n  ";
  return buffer;}

  foundHelper = helpers.playlist;
  stack1 = foundHelper || depth0.playlist;
  stack2 = helpers['if'];
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  return buffer;});
templates['albums'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n  <li>\n    <div class=\"album expandable\" id=\"";
  foundHelper = helpers.key;
  stack1 = foundHelper || depth0.key;
  foundHelper = helpers.albumid;
  stack2 = foundHelper || depth0.albumid;
  if(typeof stack2 === functionType) { stack1 = stack2.call(depth0, stack1, { hash: {} }); }
  else if(stack2=== undef) { stack1 = helperMissing.call(depth0, "albumid", stack1, { hash: {} }); }
  else { stack1 = stack2; }
  buffer += escapeExpression(stack1) + "\" data-key=\"";
  foundHelper = helpers.key;
  stack1 = foundHelper || depth0.key;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "key", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">\n      <div class=\"ui-icon ui-icon-triangle-1-e\"></div>\n      <span>";
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  stack2 = helpers['if'];
  tmp1 = self.program(2, program2, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(4, program4, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</span>\n    </div>\n    <ul style=\"display: none;\">\n      ";
  foundHelper = helpers.tracks;
  stack1 = foundHelper || depth0.tracks;
  tmp1 = self.program(6, program6, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  if(foundHelper && typeof stack1 === functionType) { stack1 = stack1.call(depth0, tmp1); }
  else { stack1 = blockHelperMissing.call(depth0, stack1, tmp1); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </ul>\n  </li>\n";
  return buffer;}
function program2(depth0,data) {
  
  var stack1;
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "name", { hash: {} }); }
  return escapeExpression(stack1);}

function program4(depth0,data) {
  
  
  return "[Unknown Album]";}

function program6(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n        <li>\n          <div class=\"track\" id=\"";
  foundHelper = helpers.file;
  stack1 = foundHelper || depth0.file;
  foundHelper = helpers.trackid;
  stack2 = foundHelper || depth0.trackid;
  if(typeof stack2 === functionType) { stack1 = stack2.call(depth0, stack1, { hash: {} }); }
  else if(stack2=== undef) { stack1 = helperMissing.call(depth0, "trackid", stack1, { hash: {} }); }
  else { stack1 = stack2; }
  buffer += escapeExpression(stack1) + "\" data-file=\"";
  foundHelper = helpers.file;
  stack1 = foundHelper || depth0.file;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "file", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">\n            <span>";
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  stack2 = helpers['if'];
  tmp1 = self.program(7, program7, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  foundHelper = helpers.artist_disambiguation;
  stack1 = foundHelper || depth0.artist_disambiguation;
  stack2 = helpers['if'];
  tmp1 = self.program(9, program9, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  foundHelper = helpers.name;
  stack1 = foundHelper || depth0.name;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</span>\n          </div>\n        </li>\n      ";
  return buffer;}
function program7(depth0,data) {
  
  var buffer = "", stack1;
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "track", { hash: {} }); }
  buffer += escapeExpression(stack1) + ". ";
  return buffer;}

function program9(depth0,data) {
  
  var buffer = "", stack1;
  foundHelper = helpers.artist_disambiguation;
  stack1 = foundHelper || depth0.artist_disambiguation;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "artist_disambiguation", { hash: {} }); }
  buffer += escapeExpression(stack1) + " - ";
  return buffer;}

  foundHelper = helpers.albums;
  stack1 = foundHelper || depth0.albums;
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  if(foundHelper && typeof stack1 === functionType) { stack1 = stack1.call(depth0, tmp1); }
  else { stack1 = blockHelperMissing.call(depth0, stack1, tmp1); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;});
templates['chat_user_list'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <li>\n    <span class=\"";
  foundHelper = helpers['class'];
  stack1 = foundHelper || depth0['class'];
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "class", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\">";
  foundHelper = helpers.user_name;
  stack1 = foundHelper || depth0.user_name;
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "user_name", { hash: {} }); }
  buffer += escapeExpression(stack1) + "</span>\n  </li>\n";
  return buffer;}

  foundHelper = helpers.users;
  stack1 = foundHelper || depth0.users;
  stack2 = helpers.each;
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;});
templates['library_menu'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n      ";
  foundHelper = helpers.permissions;
  stack1 = foundHelper || depth0.permissions;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.admin);
  stack2 = helpers['if'];
  tmp1 = self.program(2, program2, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(4, program4, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;}
function program2(depth0,data) {
  
  
  return "\n        <a href=\"#\" class=\"delete hoverable\">Delete</a>\n      ";}

function program4(depth0,data) {
  
  
  return "\n        <span title=\"Delete is disabled: insufficient privileges. See Settings.\">Delete</span>\n      ";}

function program6(depth0,data) {
  
  
  return "\n      <span title=\"Delete is disabled due to invalid server configuration.\">Delete</span>\n    ";}

function program8(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n    <li>\n      ";
  foundHelper = helpers.status;
  stack1 = foundHelper || depth0.status;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.download_enabled);
  stack2 = helpers['if'];
  tmp1 = self.program(9, program9, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(11, program11, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </li>\n  ";
  return buffer;}
function program9(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <a href=\"library/";
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.file);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "track.file", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\" class=\"download hoverable\" target=\"_blank\">Download</a>\n      ";
  return buffer;}

function program11(depth0,data) {
  
  
  return "\n        <span title=\"Download is disabled due to invalid server configuration.\">Download</span>\n      ";}

  buffer += "<ul id=\"menu\" class=\"ui-widget-content ui-corner-all\">\n  <li><a href=\"#\" class=\"queue hoverable\">Queue</a></li>\n  <li><a href=\"#\" class=\"queue-next hoverable\">Queue Next</a></li>\n  <li><a href=\"#\" class=\"queue-random hoverable\">Queue in Random Order</a></li>\n  <li><a href=\"#\" class=\"queue-next-random hoverable\">Queue Next in Random Order</a></li>\n  <li>\n    ";
  foundHelper = helpers.status;
  stack1 = foundHelper || depth0.status;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.delete_enabled);
  stack2 = helpers['if'];
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(6, program6, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </li>\n  ";
  foundHelper = helpers.track;
  stack1 = foundHelper || depth0.track;
  stack2 = helpers['if'];
  tmp1 = self.program(8, program8, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.noop;
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n\n";
  return buffer;});
templates['shortcuts'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var foundHelper, self=this;


  return "<div id=\"shortcuts\" style=\"display: none\">\n  <h1>Playback</h1>\n  <dl>\n    <dt>Space</dt>\n    <dd>Toggle playback</dd>\n  </dl>\n  <dl>\n    <dt>Left <em>and</em> Right</dt>\n    <dd>Skip 10 seconds in the song</dd>\n  </dl>\n  <dl>\n    <dt>Shift</dt>\n    <dd>Hold to skip by 10% instead of 10 seconds</dd>\n  </dl>\n  <dl>\n    <dt>&lt; <em>or</em> Ctrl + Left <em>and</em> &gt; <em>or</em> Ctrl + Right</dt>\n    <dd>Skip track</dd>\n  </dl>\n  <dl>\n    <dt>- <em>and</em> +</dt>\n    <dd>Change volume</dd>\n  </dl>\n  <dl>\n    <dt>s</dt>\n    <dd>Toggle streaming</dd>\n  </dl>\n\n  <h1>Playlist</h1>\n  <dl>\n    <dt>Up <em>and</em> Down</dt>\n    <dd>Select the next song</dd>\n  </dl>\n  <dl>\n    <dt>Ctrl + Up <em>and</em> Ctrl + Down</dt>\n    <dd>Move selection up or down one</dd>\n  </dl>\n  <dl>\n    <dt>Enter</dt>\n    <dd>Play the selected song</dd>\n  </dl>\n  <dl>\n    <dt>C</dt>\n    <dd>Clear playlist</dd>\n  </dl>\n  <dl>\n    <dt>H</dt>\n    <dd>Shuffle playlist</dd>\n  </dl>\n  <dl>\n    <dt>d</dt>\n    <dd>Toggle dynamic playlist mode</dd>\n  </dl>\n  <dl>\n    <dt>r</dt>\n    <dd>Change repeat state</dd>\n  </dl>\n  <dl>\n    <dt>Del</dt>\n    <dd>Remove selected songs from playlist</dd>\n  </dl>\n  <dl>\n    <dt>Shift + Del</dt>\n    <dd>Delete selected songs from library</dd>\n  </dl>\n\n  <h1>Navigation</h1>\n  <dl>\n    <dt>l</dt>\n    <dd>Switch to Library tab</dd>\n  </dl>\n  <dl>\n    <dt>u</dt>\n    <dd>Switch to Upload tab</dd>\n  </dl>\n  <dl>\n    <dt>t</dt>\n    <dd>Focus chat box</dd>\n  </dl>\n\n  <h1>Library Search Box</h1>\n  <dl>\n    <dt>/</dt>\n    <dd>Focus library search</dd>\n  </dl>\n  <dl>\n    <dt>Esc</dt>\n    <dd>Clear filter. If filter is already clear, remove focus.</dd>\n  </dl>\n  <dl>\n    <dt>Enter</dt>\n    <dd>Queue all search results</dd>\n  </dl>\n  <dl>\n    <dt>Down</dt>\n    <dd>Select the first search result</dd>\n  </dl>\n\n  <h1>Library</h1>\n  <dl>\n    <dt>Up <em>and</em> Down</dt>\n    <dd>Select the next item up or down</dd>\n  </dl>\n  <dl>\n    <dt>Left <em>and</em> Right</dt>\n    <dd>Expand or collapse selected item</dd>\n  </dl>\n  <dl>\n    <dt>Enter</dt>\n    <dd>Queue selected items<dd>\n  </dl>\n  <dl>\n    <dt>Del</dt>\n    <dd>Delete selected songs from library</dd>\n  </dl>\n\n  <h1>Miscellaneous</h1>\n  <dl>\n    <dt>?</dt>\n    <dd>Displays keyboard shortcuts</dd>\n  </dl>\n  <dl>\n    <dt>Esc</dt>\n    <dd>Close menu, cancel drag, clear selection</dd>\n  </dl>\n  <dl>\n    <dt>Alt</dt>\n    <dd>Hold when right clicking to get the normal browser menu</dd>\n  </dl>\n  <dl>\n    <dt>Shift</dt>\n    <dd>Hold while queuing to queue next<dd>\n  </dl>\n  <dl>\n    <dt>Alt</dt>\n    <dd>Hold while queuing to queue in random order<dd>\n  </dl>\n  <dl>\n    <dt>Ctrl</dt>\n    <dd>Hold to select multiple items<dd>\n  </dl>\n  <dl>\n    <dt>Shift</dt>\n    <dd>Hold while selecting to select all items in between<dd>\n  </dl>\n</div>\n";});
templates['playlist_menu'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n      ";
  foundHelper = helpers.permissions;
  stack1 = foundHelper || depth0.permissions;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.admin);
  stack2 = helpers['if'];
  tmp1 = self.program(2, program2, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(4, program4, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;}
function program2(depth0,data) {
  
  
  return "\n        <a href=\"#\" class=\"delete hoverable\">Delete From Library</a>\n      ";}

function program4(depth0,data) {
  
  
  return "\n        <span title=\"Delete is disabled: insufficient privileges. See Settings.\">Delete From Library</span>\n      ";}

function program6(depth0,data) {
  
  
  return "\n      <span title=\"Delete is disabled due to invalid server configuration.\">Delete From Library</span>\n    ";}

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n    <a href=\"library/";
  foundHelper = helpers.item;
  stack1 = foundHelper || depth0.item;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.track);
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.file);
  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }
  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "item.track.file", { hash: {} }); }
  buffer += escapeExpression(stack1) + "\" class=\"download hoverable\" target=\"_blank\">Download</a>\n  ";
  return buffer;}

function program10(depth0,data) {
  
  
  return "\n    <span title=\"Download is disabled due to invalid server configuration.\">Download</span>\n  ";}

  buffer += "<ul id=\"menu\" class=\"ui-widget-content ui-corner-all\">\n  <li><a href=\"#\" class=\"remove hoverable\">Remove</a></li>\n  <li>\n    ";
  foundHelper = helpers.status;
  stack1 = foundHelper || depth0.status;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.delete_enabled);
  stack2 = helpers['if'];
  tmp1 = self.program(1, program1, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(6, program6, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </li>\n  <li>\n  ";
  foundHelper = helpers.status;
  stack1 = foundHelper || depth0.status;
  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1.download_enabled);
  stack2 = helpers['if'];
  tmp1 = self.program(8, program8, data);
  tmp1.hash = {};
  tmp1.fn = tmp1;
  tmp1.inverse = self.program(10, program10, data);
  stack1 = stack2.call(depth0, stack1, tmp1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </li>\n</ul>\n";
  return buffer;});
})();
(function() {
  var c, ok_id_chars, _exports, _i, _len, _ref;

  _exports = typeof exports !== "undefined" && exports !== null ? exports : window.Util = {};

  _exports.schedule = function(delay, func) {
    return window.setInterval(func, delay);
  };

  _exports.wait = function(delay, func) {
    return setTimeout(func, delay);
  };

  _exports.shuffle = function(array) {
    var current, tmp, top, _results;
    top = array.length;
    _results = [];
    while (--top > 0) {
      current = Math.floor(Math.random() * (top + 1));
      tmp = array[current];
      array[current] = array[top];
      _results.push(array[top] = tmp);
    }
    return _results;
  };

  _exports.formatTime = function(seconds) {
    var hours, minutes, zfill;
    seconds = Math.floor(seconds);
    minutes = Math.floor(seconds / 60);
    seconds -= minutes * 60;
    hours = Math.floor(minutes / 60);
    minutes -= hours * 60;
    zfill = function(n) {
      if (n < 10) {
        return "0" + n;
      } else {
        return "" + n;
      }
    };
    if (hours !== 0) {
      return "" + hours + ":" + (zfill(minutes)) + ":" + (zfill(seconds));
    } else {
      return "" + minutes + ":" + (zfill(seconds));
    }
  };

  ok_id_chars = {};

  _ref = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-";
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    c = _ref[_i];
    ok_id_chars[c] = true;
  }

  _exports.toHtmlId = function(string) {
    var c, out, _j, _len2;
    out = "";
    for (_j = 0, _len2 = string.length; _j < _len2; _j++) {
      c = string[_j];
      if (ok_id_chars[c]) {
        out += c;
      } else {
        out += "_" + c.charCodeAt(0);
      }
    }
    return out;
  };

  _exports.compareArrays = function(arr1, arr2) {
    var diff, i1, val1, val2, _len2;
    for (i1 = 0, _len2 = arr1.length; i1 < _len2; i1++) {
      val1 = arr1[i1];
      val2 = arr2[i1];
      diff = (val1 != null ? val1 : -1) - (val2 != null ? val2 : -1);
      if (diff !== 0) return diff;
    }
    return 0;
  };

  _exports.parseQuery = function(query) {
    var obj, param, val, valset, _j, _len2, _ref2, _ref3;
    obj = {};
    if (query == null) return obj;
    _ref2 = (function() {
      var _k, _len2, _ref2, _results;
      _ref2 = query.split('&');
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        valset = _ref2[_k];
        _results.push(valset.split('='));
      }
      return _results;
    })();
    for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
      _ref3 = _ref2[_j], param = _ref3[0], val = _ref3[1];
      obj[unescape(param)] = unescape(val);
    }
    return obj;
  };

}).call(this);
(function() {
  var DEFAULT_ARTIST, MPD_SENTINEL, Mpd, VARIOUS_ARTISTS, boolToInt, bound, dateToElapsed, elapsedToDate, extend, fromMpdVol, noop, parseMaybeUndefNumber, pickNRandomProps, qEscape, sign, sortableTitle, split_once, startsWith, stripPrefixes, titleCompare, toMpdVol, trackNameFromFile, trim, __trim, __trimLeft, __trimRight, _exports,
    __slice = Array.prototype.slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _exports = typeof exports !== "undefined" && exports !== null ? exports : window;

  DEFAULT_ARTIST = "[Unknown Artist]";

  VARIOUS_ARTISTS = "Various Artists";

  MPD_SENTINEL = /^(OK|ACK|list_OK)(.*)$/m;

  __trimLeft = /^\s+/;

  __trimRight = /\s+$/;

  __trim = String.prototype.trim;

  trim = __trim != null ? function(text) {
    if (!(text != null)) {
      return "";
    } else {
      return __trim.call(text);
    }
  } : function(text) {
    if (!(text != null)) {
      return "";
    } else {
      return text.toString().replace(__trimLeft, "").replace(__trimRight, "");
    }
  };

  extend = function() {
    var arg, args, obj, prop, val, _i, _len;
    obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      for (prop in arg) {
        val = arg[prop];
        obj[prop] = val;
      }
    }
    return obj;
  };

  elapsedToDate = function(elapsed) {
    return new Date((new Date()) - elapsed * 1000);
  };

  dateToElapsed = function(date) {
    return ((new Date()) - date) / 1000;
  };

  bound = function(min, val, max) {
    if (val < min) {
      return min;
    } else if (val > max) {
      return max;
    } else {
      return val;
    }
  };

  fromMpdVol = function(vol) {
    vol = parseInt(vol);
    if (vol < 0 || vol > 100) return null;
    return vol / 100;
  };

  toMpdVol = function(vol) {
    return bound(0, Math.round(parseFloat(vol) * 100), 100);
  };

  startsWith = function(string, str) {
    return string.substring(0, str.length) === str;
  };

  stripPrefixes = ['the ', 'a ', 'an '];

  sortableTitle = function(title) {
    var prefix, t, _i, _len;
    t = title.toLowerCase();
    for (_i = 0, _len = stripPrefixes.length; _i < _len; _i++) {
      prefix = stripPrefixes[_i];
      if (startsWith(t, prefix)) {
        t = t.substring(prefix.length);
        break;
      }
    }
    return t;
  };

  titleCompare = function(a, b) {
    var _a, _b;
    _a = sortableTitle(a);
    _b = sortableTitle(b);
    if (_a < _b) {
      return -1;
    } else if (_a > _b) {
      return 1;
    } else {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    }
  };

  noop = function() {};

  qEscape = function(str) {
    return str.toString().replace(/"/g, '\\"');
  };

  pickNRandomProps = function(obj, n) {
    var count, i, prop, results;
    if (n === 0) return [];
    results = [];
    count = 0;
    for (prop in obj) {
      count += 1;
      for (i = 0; 0 <= n ? i < n : i > n; 0 <= n ? i++ : i--) {
        if (Math.random() < 1 / count) results[i] = prop;
      }
    }
    return results;
  };

  sign = function(n) {
    if (n > 0) {
      return 1;
    } else if (n < 0) {
      return -1;
    } else {
      return 0;
    }
  };

  boolToInt = function(b) {
    if (b) {
      return 1;
    } else {
      return 0;
    }
  };

  parseMaybeUndefNumber = function(n) {
    n = parseInt(n);
    if (isNaN(n)) n = "";
    return n;
  };

  _exports.split_once = split_once = function(line, separator) {
    var index;
    index = line.indexOf(separator);
    return [line.substr(0, index), line.substr(index + separator.length)];
  };

  _exports.trackNameFromFile = trackNameFromFile = function(filename) {
    var dot, filetitle, len;
    filetitle = filename.substr(filename.lastIndexOf('/') + 1);
    len = (dot = filetitle.lastIndexOf('.')) >= 0 ? dot : filetitle.length;
    return filetitle.substr(0, len);
  };

  _exports.Mpd = Mpd = (function() {
    var albumComparator, artistComparator, getOrCreate, makeComparator, trackComparator;

    Mpd.prototype.on = function(event_name, handler) {
      var _base, _ref;
      return ((_ref = (_base = this.event_handlers)[event_name]) != null ? _ref : _base[event_name] = []).push(handler);
    };

    Mpd.prototype.raiseEvent = function() {
      var args, event_name, handler, handlers_list, _i, _len, _results;
      event_name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      handlers_list = extend([], this.event_handlers[event_name] || []);
      _results = [];
      for (_i = 0, _len = handlers_list.length; _i < _len; _i++) {
        handler = handlers_list[_i];
        _results.push(handler.apply(null, args));
      }
      return _results;
    };

    Mpd.prototype.handleMessage = function(msg) {
      var handler, _ref;
      handler = this.msgHandlerQueue.shift();
      if ((_ref = this.debugMsgConsole) != null) {
        _ref.log(("get-: " + handler.debug_id + ": ") + JSON.stringify(msg));
      }
      if (msg != null) return handler.cb(msg);
    };

    Mpd.prototype.send = function(msg) {
      var _ref, _ref2, _ref3;
      if ((_ref = this.debugMsgConsole) != null) {
        _ref.log(("send: " + ((_ref2 = (_ref3 = this.msgHandlerQueue[this.msgHandlerQueue.length - 1]) != null ? _ref3.debug_id : void 0) != null ? _ref2 : -1) + ": ") + JSON.stringify(msg));
      }
      return this.rawSend(msg);
    };

    Mpd.prototype.receive = function(data) {
      var code, line, m, msg, str;
      this.buffer += data;
      while (true) {
        m = this.buffer.match(MPD_SENTINEL);
        if (!(m != null)) return;
        msg = this.buffer.substring(0, m.index);
        line = m[0], code = m[1], str = m[2];
        if (code === "ACK") {
          this.raiseEvent('error', str);
          this.handleMessage(null);
        } else if (line.indexOf("OK MPD") === 0) {
          this.raiseEvent('connect');
        } else {
          this.handleMessage(msg);
        }
        this.buffer = this.buffer.substring(msg.length + line.length + 1);
      }
    };

    Mpd.prototype.handleIdleResults = function(msg) {
      var system, _i, _len, _ref, _ref2, _results;
      _ref = trim(msg).split("\n");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        system = _ref[_i];
        if (system.length > 0) {
          _results.push(((_ref2 = this.updateFuncs[system.substring(9)]) != null ? _ref2 : noop)());
        }
      }
      return _results;
    };

    Mpd.prototype.clearPlaylist = function() {
      this.playlist = {};
      this.playlist.item_list = [];
      return this.playlist.item_table = {};
    };

    Mpd.prototype.anticipatePlayId = function(track_id) {
      var item;
      item = this.playlist.item_table[track_id];
      this.status.current_item = item;
      this.status.state = "play";
      this.status.time = item.track.time;
      this.status.track_start_date = new Date();
      return this.raiseEvent('statusupdate');
    };

    Mpd.prototype.anticipateSkip = function(direction) {
      var next_item;
      next_item = this.playlist.item_list[this.status.current_item.pos + direction];
      if (next_item != null) return this.anticipatePlayId(next_item.id);
    };

    Mpd.prototype.parseMpdTracks = function(msg) {
      var current_track, flush_current_track, key, line, mpd_tracks, value, _i, _len, _ref, _ref2;
      if (msg === "") return [];
      mpd_tracks = [];
      current_track = null;
      flush_current_track = function() {
        if (current_track !== null) mpd_tracks.push(current_track);
        return current_track = {};
      };
      _ref = msg.split("\n");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _ref2 = split_once(line, ": "), key = _ref2[0], value = _ref2[1];
        if (key === 'directory') continue;
        if (key === 'file') flush_current_track();
        current_track[key] = value;
      }
      flush_current_track();
      return mpd_tracks;
    };

    Mpd.prototype.mpdTracksToTrackObjects = function(mpd_tracks) {
      var artist_name, mpd_track, track, tracks, _i, _len;
      tracks = [];
      for (_i = 0, _len = mpd_tracks.length; _i < _len; _i++) {
        mpd_track = mpd_tracks[_i];
        artist_name = trim(mpd_track.Artist);
        track = {
          file: mpd_track.file,
          name: mpd_track.Title || trackNameFromFile(mpd_track.file),
          artist_name: artist_name,
          artist_disambiguation: "",
          album_artist_name: mpd_track.AlbumArtist || artist_name,
          album_name: trim(mpd_track.Album),
          track: parseMaybeUndefNumber(mpd_track.Track),
          time: parseInt(mpd_track.Time),
          year: parseMaybeUndefNumber(mpd_track.Date)
        };
        track.search_tags = [track.artist_name, track.album_artist_name, track.album_name, track.name, track.file].join("\n").toLowerCase();
        tracks.push(track);
      }
      return tracks;
    };

    getOrCreate = function(key, table, initObjFunc) {
      var result;
      result = table[key];
      if (!(result != null)) {
        result = initObjFunc();
        table[key] = result;
      }
      return result;
    };

    makeComparator = function(order_keys) {
      return function(a, b) {
        var order_key, _i, _len;
        for (_i = 0, _len = order_keys.length; _i < _len; _i++) {
          order_key = order_keys[_i];
          a = a[order_key];
          b = b[order_key];
          if (a < b) return -1;
          if (a > b) return 1;
        }
        return 0;
      };
    };

    trackComparator = makeComparator(["track", "name"]);

    albumComparator = makeComparator(["year", "name"]);

    artistComparator = function(a, b) {
      return titleCompare(a.name, b.name);
    };

    Mpd.prototype.buildArtistAlbumTree = function(tracks, library) {
      var album, album_artist_name, album_artists, album_key, artist, artist_count, artist_table, i, k, track, various_artist, _i, _j, _len, _len2, _len3, _len4, _len5, _ref, _ref2, _ref3, _ref4, _ref5;
      library.track_table = {};
      library.album_table = {};
      for (_i = 0, _len = tracks.length; _i < _len; _i++) {
        track = tracks[_i];
        library.track_table[track.file] = track;
        if (track.album_name === "") {
          album_key = track.album_artist_name + "\n";
        } else {
          album_key = track.album_name + "\n";
        }
        album_key = album_key.toLowerCase();
        album = getOrCreate(album_key, library.album_table, function() {
          return {
            name: track.album_name,
            year: track.year,
            tracks: [],
            key: album_key
          };
        });
        track.album = album;
        album.tracks.push(track);
        if (!(album.year != null)) album.year = album_year;
      }
      artist_table = {};
      _ref = library.album_table;
      for (k in _ref) {
        album = _ref[k];
        album_artists = {};
        album.tracks.sort(trackComparator);
        _ref2 = album.tracks;
        for (i = 0, _len2 = _ref2.length; i < _len2; i++) {
          track = _ref2[i];
          track.pos = i;
          album_artist_name = track.album_artist_name;
          album_artists[album_artist_name.toLowerCase()] = 1;
          album_artists[track.artist_name.toLowerCase()] = 1;
        }
        artist_count = 0;
        for (k in album_artists) {
          artist_count += 1;
        }
        if (artist_count > 1) album_artist_name = VARIOUS_ARTISTS;
        if (album_artist_name === VARIOUS_ARTISTS) {
          _ref3 = album.tracks;
          for (_j = 0, _len3 = _ref3.length; _j < _len3; _j++) {
            track = _ref3[_j];
            track.artist_disambiguation = track.artist_name;
          }
        }
        artist = getOrCreate(album_artist_name.toLowerCase(), artist_table, function() {
          return {
            name: album_artist_name,
            albums: []
          };
        });
        album.artist = artist;
        artist.albums.push(album);
      }
      library.artists = [];
      various_artist = null;
      for (k in artist_table) {
        artist = artist_table[k];
        artist.albums.sort(albumComparator);
        _ref4 = artist.albums;
        for (i = 0, _len4 = _ref4.length; i < _len4; i++) {
          album = _ref4[i];
          album.pos = i;
        }
        if (artist.name === VARIOUS_ARTISTS) {
          various_artist = artist;
        } else {
          library.artists.push(artist);
        }
      }
      library.artists.sort(artistComparator);
      if (various_artist != null) library.artists.splice(0, 0, various_artist);
      _ref5 = library.artists;
      for (i = 0, _len5 = _ref5.length; i < _len5; i++) {
        artist = _ref5[i];
        artist.pos = i;
      }
      return library.artist_table = artist_table;
    };

    Mpd.prototype.sendWithCallback = function(cmd, cb) {
      if (cb == null) cb = noop;
      this.msgHandlerQueue.push({
        debug_id: this.msgCounter++,
        cb: cb
      });
      return this.send(cmd + "\n");
    };

    Mpd.prototype.handleIdleResultsLoop = function(msg) {
      this.handleIdleResults(msg);
      if (this.msgHandlerQueue.length === 0) {
        return this.sendWithCallback("idle", this.handleIdleResultsLoop);
      }
    };

    Mpd.prototype.fixPlaylistPosCache = function() {
      var i, item, _len, _ref, _results;
      _ref = this.playlist.item_list;
      _results = [];
      for (i = 0, _len = _ref.length; i < _len; i++) {
        item = _ref[i];
        _results.push(item.pos = i);
      }
      return _results;
    };

    Mpd.prototype.resetServerState = function() {
      this.buffer = "";
      this.msgHandlerQueue = [];
      this.debugMsgConsole = null;
      this.msgCounter = 0;
      this.idling = false;
      this.haveFileListCache = false;
      this.library = {
        artists: [],
        track_table: {}
      };
      this.search_results = this.library;
      this.last_query = "";
      this.clearPlaylist();
      return this.status = {
        current_item: null
      };
    };

    function Mpd() {
      this.scanFiles = __bind(this.scanFiles, this);
      this.authenticate = __bind(this.authenticate, this);
      this.getFileInfo = __bind(this.getFileInfo, this);
      this.changeStatus = __bind(this.changeStatus, this);
      this.setVolume = __bind(this.setVolume, this);
      this.seek = __bind(this.seek, this);
      this.close = __bind(this.close, this);
      this.removeId = __bind(this.removeId, this);
      this.removeIds = __bind(this.removeIds, this);
      this.shiftIds = __bind(this.shiftIds, this);
      this.moveIds = __bind(this.moveIds, this);
      this.playId = __bind(this.playId, this);
      this.prev = __bind(this.prev, this);
      this.next = __bind(this.next, this);
      this.pause = __bind(this.pause, this);
      this.play = __bind(this.play, this);
      this.stop = __bind(this.stop, this);
      this.shuffle = __bind(this.shuffle, this);
      this.clear = __bind(this.clear, this);
      this.queueFileNext = __bind(this.queueFileNext, this);
      this.queueFilesNext = __bind(this.queueFilesNext, this);
      this.queueFile = __bind(this.queueFile, this);
      this.queueFiles = __bind(this.queueFiles, this);
      this.queueRandomTracks = __bind(this.queueRandomTracks, this);
      this.queueRandomTracksCommands = __bind(this.queueRandomTracksCommands, this);
      this.search = __bind(this.search, this);
      this.updateStatus = __bind(this.updateStatus, this);
      this.updatePlaylist = __bind(this.updatePlaylist, this);
      this.updateLibrary = __bind(this.updateLibrary, this);
      this.sendCommands = __bind(this.sendCommands, this);
      this.sendCommand = __bind(this.sendCommand, this);
      this.handleConnectionStart = __bind(this.handleConnectionStart, this);
      this.getArtistAlbums = __bind(this.getArtistAlbums, this);
      this.artistKey = __bind(this.artistKey, this);
      this.removeListener = __bind(this.removeListener, this);
      this.removeEventListeners = __bind(this.removeEventListeners, this);
      this.resetServerState = __bind(this.resetServerState, this);
      this.fixPlaylistPosCache = __bind(this.fixPlaylistPosCache, this);
      this.handleIdleResultsLoop = __bind(this.handleIdleResultsLoop, this);
      this.sendWithCallback = __bind(this.sendWithCallback, this);
      this.buildArtistAlbumTree = __bind(this.buildArtistAlbumTree, this);
      this.mpdTracksToTrackObjects = __bind(this.mpdTracksToTrackObjects, this);
      this.parseMpdTracks = __bind(this.parseMpdTracks, this);
      this.anticipateSkip = __bind(this.anticipateSkip, this);
      this.anticipatePlayId = __bind(this.anticipatePlayId, this);
      this.clearPlaylist = __bind(this.clearPlaylist, this);
      this.handleIdleResults = __bind(this.handleIdleResults, this);
      this.receive = __bind(this.receive, this);
      this.send = __bind(this.send, this);
      this.handleMessage = __bind(this.handleMessage, this);
      this.raiseEvent = __bind(this.raiseEvent, this);
      this.on = __bind(this.on, this);
      var _this = this;
      this.resetServerState();
      this.event_handlers = {};
      this.updateFuncs = {
        database: function() {
          _this.haveFileListCache = false;
          return _this.updateLibrary();
        },
        update: noop,
        stored_playlist: noop,
        playlist: this.updatePlaylist,
        player: this.updateStatus,
        mixer: this.updateStatus,
        output: noop,
        options: this.updateStatus,
        sticker: function() {
          return _this.raiseEvent('stickerupdate');
        },
        subscription: noop,
        message: noop
      };
    }

    Mpd.prototype.removeEventListeners = function(event_name) {
      return (this.event_handlers[event_name] || []).length = 0;
    };

    Mpd.prototype.removeListener = function(event_name, handler) {
      var h, handlers, i, _len;
      handlers = this.event_handlers[event_name] || [];
      for (i = 0, _len = handlers.length; i < _len; i++) {
        h = handlers[i];
        if (h === handler) {
          handlers.splice(i, 1);
          return;
        }
      }
    };

    Mpd.prototype.artistKey = function(artist_name) {
      if (artist_name === DEFAULT_ARTIST) {
        return "";
      } else {
        return artist_name.toLowerCase();
      }
    };

    Mpd.prototype.getArtistAlbums = function(artist_name) {
      return this.search_results.artist_table[this.artistKey(artist_name)].albums;
    };

    Mpd.prototype.handleConnectionStart = function() {
      this.sendCommand("subscribe Status");
      this.updateLibrary();
      this.updateStatus();
      return this.updatePlaylist();
    };

    Mpd.prototype.sendCommand = function(command, callback) {
      if (callback == null) callback = noop;
      if (this.idling) this.send("noidle\n");
      this.sendWithCallback(command, callback);
      this.sendWithCallback("idle", this.handleIdleResultsLoop);
      return this.idling = true;
    };

    Mpd.prototype.sendCommands = function(command_list, callback) {
      if (callback == null) callback = noop;
      if (command_list.length === 0) return;
      return this.sendCommand("command_list_begin\n" + (command_list.join("\n")) + "\ncommand_list_end", callback);
    };

    Mpd.prototype.updateLibrary = function() {
      var _this = this;
      return this.sendCommand('listallinfo', function(msg) {
        var last_query, tracks;
        tracks = _this.mpdTracksToTrackObjects(_this.parseMpdTracks(msg));
        _this.buildArtistAlbumTree(tracks, _this.library);
        _this.haveFileListCache = true;
        last_query = _this.last_query;
        _this.last_query = "";
        return _this.search(last_query);
      });
    };

    Mpd.prototype.updatePlaylist = function(callback) {
      var _this = this;
      if (callback == null) callback = noop;
      return this.sendCommand("playlistinfo", function(msg) {
        var id, mpd_track, mpd_tracks, obj, _i, _len;
        mpd_tracks = _this.parseMpdTracks(msg);
        _this.clearPlaylist();
        for (_i = 0, _len = mpd_tracks.length; _i < _len; _i++) {
          mpd_track = mpd_tracks[_i];
          id = parseInt(mpd_track.Id);
          obj = {
            id: id,
            track: _this.library.track_table[mpd_track.file],
            pos: _this.playlist.item_list.length
          };
          _this.playlist.item_list.push(obj);
          _this.playlist.item_table[id] = obj;
        }
        if (_this.status.current_item != null) {
          _this.status.current_item = _this.playlist.item_table[_this.status.current_item.id];
        }
        if (_this.status.current_item != null) {
          _this.raiseEvent('playlistupdate');
          return callback();
        } else {
          return _this.updateStatus(function() {
            callback();
            return _this.raiseEvent('playlistupdate');
          });
        }
      });
    };

    Mpd.prototype.updateStatus = function(callback) {
      var _this = this;
      if (callback == null) callback = noop;
      this.sendCommand("status", function(msg) {
        var key, line, o, val, _i, _len, _ref, _ref2;
        o = {};
        _ref = (function() {
          var _j, _len, _ref, _results;
          _ref = msg.split("\n");
          _results = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            line = _ref[_j];
            _results.push(split_once(line, ": "));
          }
          return _results;
        })();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref2 = _ref[_i], key = _ref2[0], val = _ref2[1];
          o[key] = val;
        }
        extend(_this.status, {
          volume: fromMpdVol(o.volume),
          repeat: parseInt(o.repeat) !== 0,
          random: parseInt(o.random) !== 0,
          single: parseInt(o.single) !== 0,
          consume: parseInt(o.consume) !== 0,
          state: o.state,
          time: null,
          bitrate: null,
          track_start_date: null
        });
        if (o.bitrate != null) _this.status.bitrate = parseInt(o.bitrate);
        if ((o.time != null) && (o.elapsed != null)) {
          _this.status.time = parseInt(o.time.split(":")[1]);
          _this.status.elapsed = parseFloat(o.elapsed);
          return _this.status.track_start_date = elapsedToDate(_this.status.elapsed);
        }
      });
      return this.sendCommand("currentsong", function(msg) {
        var id, mpd_track, mpd_tracks, pos, _i, _len, _results;
        mpd_tracks = _this.parseMpdTracks(msg);
        if (mpd_tracks.length === 0) {
          _this.status.current_item = null;
          callback();
          _this.raiseEvent('statusupdate');
          return;
        }
        _results = [];
        for (_i = 0, _len = mpd_tracks.length; _i < _len; _i++) {
          mpd_track = mpd_tracks[_i];
          id = parseInt(mpd_track.Id);
          pos = parseInt(mpd_track.Pos);
          _this.status.current_item = _this.playlist.item_table[id];
          if ((_this.status.current_item != null) && _this.status.current_item.pos === pos) {
            _this.status.current_item.track = _this.library.track_table[mpd_track.file];
            _this.raiseEvent('statusupdate');
            _results.push(callback());
          } else {
            _this.status.current_item = {
              id: id,
              pos: pos,
              track: _this.library.track_table[mpd_track.file]
            };
            _results.push(_this.updatePlaylist(function() {
              callback();
              return _this.raiseEvent('statusupdate');
            }));
          }
        }
        return _results;
      });
    };

    Mpd.prototype.search = function(query) {
      var is_match, k, result, track, words, _ref;
      query = trim(query);
      if (query.length === 0) {
        this.search_results = this.library;
        this.raiseEvent('libraryupdate');
        this.last_query = query;
        return;
      }
      words = query.toLowerCase().split(/\s+/);
      query = words.join(" ");
      if (query === this.last_query) return;
      this.last_query = query;
      result = [];
      _ref = this.library.track_table;
      for (k in _ref) {
        track = _ref[k];
        is_match = (function() {
          var word, _i, _len;
          for (_i = 0, _len = words.length; _i < _len; _i++) {
            word = words[_i];
            if (track.search_tags.indexOf(word) === -1) return false;
          }
          return true;
        })();
        if (is_match) result.push(track);
      }
      this.buildArtistAlbumTree(result, this.search_results = {});
      return this.raiseEvent('libraryupdate');
    };

    Mpd.prototype.queueRandomTracksCommands = function(n) {
      var file, _i, _len, _ref, _results;
      if (!this.haveFileListCache) return [];
      _ref = pickNRandomProps(this.library.track_table, n);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push("addid \"" + (qEscape(file)) + "\"");
      }
      return _results;
    };

    Mpd.prototype.queueRandomTracks = function(n) {
      return this.sendCommands(this.queueRandomTracksCommands(n));
    };

    Mpd.prototype.queueFiles = function(files, pos) {
      var cmds, file, i, items, _ref, _ref2,
        _this = this;
      if (pos == null) pos = this.playlist.item_list.length;
      if (!files.length) return;
      cmds = [];
      for (i = _ref = files.length - 1; _ref <= 0 ? i <= 0 : i >= 0; _ref <= 0 ? i++ : i--) {
        file = files[i];
        cmds.push("addid \"" + (qEscape(file)) + "\" " + pos);
      }
      items = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          _results.push({
            id: null,
            pos: null,
            track: this.library.track_table[file]
          });
        }
        return _results;
      }).call(this);
      (_ref2 = this.playlist.item_list).splice.apply(_ref2, [pos, 0].concat(__slice.call(items)));
      this.fixPlaylistPosCache();
      this.sendCommands(cmds, function(msg) {
        var i, index, item_id, line, _len, _ref3, _results;
        _ref3 = msg.split("\n");
        _results = [];
        for (i = 0, _len = _ref3.length; i < _len; i++) {
          line = _ref3[i];
          index = files.length - 1 - i;
          item_id = parseInt(line.substring(4));
          _results.push(items[index] = item_id);
        }
        return _results;
      });
      return this.raiseEvent('playlistupdate');
    };

    Mpd.prototype.queueFile = function(file, pos) {
      return this.queueFiles([file], pos);
    };

    Mpd.prototype.queueFilesNext = function(files) {
      var new_pos, _ref, _ref2;
      new_pos = ((_ref = (_ref2 = this.status.current_item) != null ? _ref2.pos : void 0) != null ? _ref : -1) + 1;
      return this.queueFiles(files, new_pos);
    };

    Mpd.prototype.queueFileNext = function(file) {
      return this.queueFilesNext([file]);
    };

    Mpd.prototype.clear = function() {
      this.sendCommand("clear");
      this.clearPlaylist();
      return this.raiseEvent('playlistupdate');
    };

    Mpd.prototype.shuffle = function() {
      return this.sendCommand("shuffle");
    };

    Mpd.prototype.stop = function() {
      this.sendCommand("stop");
      this.status.state = "stop";
      return this.raiseEvent('statusupdate');
    };

    Mpd.prototype.play = function() {
      this.sendCommand("play");
      if (this.status.state === "pause") {
        this.status.track_start_date = elapsedToDate(this.status.elapsed);
        this.status.state = "play";
        return this.raiseEvent('statusupdate');
      }
    };

    Mpd.prototype.pause = function() {
      this.sendCommand("pause 1");
      if (this.status.state === "play") {
        this.status.elapsed = dateToElapsed(this.status.track_start_date);
        this.status.state = "pause";
        return this.raiseEvent('statusupdate');
      }
    };

    Mpd.prototype.next = function() {
      this.sendCommand("next");
      return this.anticipateSkip(1);
    };

    Mpd.prototype.prev = function() {
      this.sendCommand("previous");
      return this.anticipateSkip(-1);
    };

    Mpd.prototype.playId = function(track_id) {
      track_id = parseInt(track_id);
      this.sendCommand("playid " + (qEscape(track_id)));
      return this.anticipatePlayId(track_id);
    };

    Mpd.prototype.moveIds = function(track_ids, pos) {
      var cmds, id, item, items, real_pos;
      pos = parseInt(pos);
      items = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = track_ids.length; _i < _len; _i++) {
          id = track_ids[_i];
          if ((item = this.playlist.item_table[id]) != null) _results.push(item);
        }
        return _results;
      }).call(this);
      items.sort(function(a, b) {
        return b.pos - a.pos;
      });
      cmds = [];
      while (items.length > 0) {
        if (pos <= items[0].pos) {
          real_pos = pos;
          item = items.shift();
        } else {
          real_pos = pos - 1;
          item = items.pop();
        }
        cmds.push("moveid " + item.id + " " + real_pos);
        this.playlist.item_list.splice(item.pos, 1);
        this.playlist.item_list.splice(real_pos, 0, item);
        this.fixPlaylistPosCache();
      }
      this.sendCommands(cmds);
      return this.raiseEvent('playlistupdate');
    };

    Mpd.prototype.shiftIds = function(track_ids, offset) {
      var id, item, items, new_pos, _i, _j, _len, _len2, _ref;
      offset = parseInt(offset);
      if (offset === 0 || track_ids.length === 0) return;
      items = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = track_ids.length; _i < _len; _i++) {
          id = track_ids[_i];
          if ((item = this.playlist.item_table[id]) != null) _results.push(item);
        }
        return _results;
      }).call(this);
      items.sort(function(a, b) {
        return sign(offset) * (b.pos - a.pos);
      });
      _ref = [items[0], items[items.length - 1]];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        new_pos = item.pos + offset;
        if (new_pos < 0 || new_pos >= this.playlist.item_list.length) return;
      }
      this.sendCommands((function() {
        var _j, _len2, _results;
        _results = [];
        for (_j = 0, _len2 = items.length; _j < _len2; _j++) {
          item = items[_j];
          _results.push("moveid " + item.id + " " + (item.pos + offset));
        }
        return _results;
      })());
      for (_j = 0, _len2 = items.length; _j < _len2; _j++) {
        item = items[_j];
        this.playlist.item_list.splice(item.pos, 1);
        this.playlist.item_list.splice(item.pos + offset, 0, item);
        this.fixPlaylistPosCache();
      }
      return this.raiseEvent('playlistupdate');
    };

    Mpd.prototype.removeIds = function(track_ids) {
      var cmds, item, track_id, _i, _len, _ref;
      cmds = [];
      for (_i = 0, _len = track_ids.length; _i < _len; _i++) {
        track_id = track_ids[_i];
        track_id = parseInt(track_id);
        if (((_ref = this.status.current_item) != null ? _ref.id : void 0) === track_id) {
          this.anticipateSkip(1);
          if (this.status.state !== "play") this.status.state = "stop";
        }
        cmds.push("deleteid " + (qEscape(track_id)));
        item = this.playlist.item_table[track_id];
        delete this.playlist.item_table[item.id];
        this.playlist.item_list.splice(item.pos, 1);
        this.fixPlaylistPosCache();
      }
      this.sendCommands(cmds);
      return this.raiseEvent('playlistupdate');
    };

    Mpd.prototype.removeId = function(track_id) {
      return this.removeIds([track_id]);
    };

    Mpd.prototype.close = function() {
      return this.send("close\n");
    };

    Mpd.prototype.seek = function(pos) {
      pos = parseFloat(pos);
      if (pos < 0) pos = 0;
      if (pos > this.status.time) pos = this.status.time;
      this.sendCommand("seekid " + this.status.current_item.id + " " + (Math.round(pos)));
      this.status.track_start_date = elapsedToDate(pos);
      return this.raiseEvent('statusupdate');
    };

    Mpd.prototype.setVolume = function(vol) {
      vol = toMpdVol(vol);
      this.sendCommand("setvol " + vol);
      this.status.volume = fromMpdVol(vol);
      return this.raiseEvent('statusupdate');
    };

    Mpd.prototype.changeStatus = function(status) {
      var cmds;
      cmds = [];
      if (status.consume != null) {
        this.status.consume = status.consume;
        cmds.push("consume " + (boolToInt(status.consume)));
      }
      if (status.random != null) {
        this.status.random = status.random;
        cmds.push("random " + (boolToInt(status.random)));
      }
      if (status.repeat != null) {
        this.status.repeat = status.repeat;
        cmds.push("repeat " + (boolToInt(status.repeat)));
      }
      if (status.single != null) {
        this.status.single = status.single;
        cmds.push("single " + (boolToInt(status.single)));
      }
      this.sendCommands(cmds);
      return this.raiseEvent('statusupdate');
    };

    Mpd.prototype.getFileInfo = function(file, cb) {
      var _this = this;
      if (cb == null) cb = noop;
      return this.sendCommand("lsinfo \"" + (qEscape(file)) + "\"", function(msg) {
        var track;
        track = _this.mpdTracksToTrackObjects(_this.parseMpdTracks(msg))[0];
        return cb(track);
      });
    };

    Mpd.prototype.authenticate = function(password) {
      return this.sendCommand("password \"" + (qEscape(password)) + "\"");
    };

    Mpd.prototype.scanFiles = function(files) {
      var file;
      return this.sendCommands((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          _results.push("update \"" + (qEscape(file)) + "\"");
        }
        return _results;
      })());
    };

    return Mpd;

  })();

}).call(this);
(function() {
  var SocketMpd,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.SocketMpd = SocketMpd = (function(_super) {

    __extends(SocketMpd, _super);

    function SocketMpd(socket) {
      this.socket = socket;
      this.rawSend = __bind(this.rawSend, this);
      SocketMpd.__super__.constructor.call(this);
      this.socket.on('FromMpd', this.receive);
      this.socket.on('MpdConnect', this.handleConnectionStart);
      this.socket.on('MpdDisconnect', this.resetServerState);
      this.socket.on('disconnect', this.resetServerState);
    }

    SocketMpd.prototype.rawSend = function(msg) {
      return this.socket.emit('ToMpd', msg);
    };

    return SocketMpd;

  })(window.Mpd);

}).call(this);
(function() {
  var $chat_list, $chat_tab, $chat_user_id_span, $chat_user_list, $document, $dynamic_mode, $lib_tabs, $library, $nowplaying, $nowplaying_elapsed, $nowplaying_left, $pl_btn_repeat, $playlist_items, $settings, $stream_btn, $track_slider, $upload_tab, $vol_slider, MARGIN, abortDrag, actually_streaming, base_title, chat_name_input_visible, clickTab, confirmDelete, getCurrentTrackPosition, getDragPosition, getLibSelPos, getRepeatStateName, getSelHelpers, getTrackSelPos, getUserName, handleDeletePressed, handleResize, haveUserName, initHandlebars, initStreaming, isAlbumExpanded, isArtistExpanded, keyboard_handlers, labelPlaylistItems, libPosToArr, mpd, mpd_alive, my_user_id, my_user_ids, nextLibPos, nextRepeatState, performDrag, permissions, prevLibPos, queueFilesPos, queueLibSelection, refreshSelection, removeContextMenu, render, renderChat, renderLibrary, renderNowPlaying, renderPlaylist, renderPlaylistButtons, renderSettings, renderStreamButton, resizeChat, scrollChatWindowToBottom, scrollLibraryToSelection, scrollPlaylistToSelection, scrollThingToSelection, selectLibraryPosition, selection, selectionToFiles, sendAuth, server_status, setDynamicMode, setUpUi, setUserName, settingsAuthCancel, settingsAuthSave, settings_ui, socket, started_drag, storeMyUserIds, streaming_buffering, toggleDynamicMode, toggleExpansion, togglePlayback, toggleStreamStatus, trying_to_stream, updateSliderPos, updateStreamingPlayer, userIdToUserName, user_is_seeking, user_is_volume_sliding;

  selection = {
    ids: {
      playlist: {},
      artist: {},
      album: {},
      track: {}
    },
    cursor: null,
    type: null,
    isLibrary: function() {
      if (!(this.type != null)) return false;
      return this.type !== 'playlist';
    },
    isPlaylist: function() {
      if (!(this.type != null)) return false;
      return this.type === 'playlist';
    },
    clear: function() {
      this.ids.artist = {};
      this.ids.album = {};
      this.ids.track = {};
      return this.ids.playlist = {};
    },
    fullClear: function() {
      this.clear();
      this.type = null;
      return this.cursor = null;
    },
    selectOnly: function(sel_name, key) {
      this.clear();
      this.type = sel_name;
      this.ids[sel_name][key] = true;
      return this.cursor = key;
    }
  };

  server_status = null;

  permissions = {};

  socket = null;

  mpd = null;

  mpd_alive = false;

  base_title = document.title;

  user_is_seeking = false;

  user_is_volume_sliding = false;

  started_drag = false;

  abortDrag = function() {};

  clickTab = null;

  trying_to_stream = false;

  actually_streaming = false;

  streaming_buffering = false;

  my_user_id = null;

  my_user_ids = {};

  if ((typeof localStorage !== "undefined" && localStorage !== null ? localStorage.my_user_ids : void 0) != null) {
    my_user_ids = JSON.parse(localStorage.my_user_ids);
  }

  chat_name_input_visible = false;

  MARGIN = 10;

  $document = $(document);

  $playlist_items = $("#playlist-items");

  $dynamic_mode = $("#dynamic-mode");

  $pl_btn_repeat = $("#pl-btn-repeat");

  $stream_btn = $("#stream-btn");

  $lib_tabs = $("#lib-tabs");

  $upload_tab = $("#lib-tabs .upload-tab");

  $chat_tab = $("#lib-tabs .chat-tab");

  $library = $("#library");

  $track_slider = $("#track-slider");

  $nowplaying = $("#nowplaying");

  $nowplaying_elapsed = $nowplaying.find(".elapsed");

  $nowplaying_left = $nowplaying.find(".left");

  $vol_slider = $("#vol-slider");

  $chat_user_list = $("#chat-user-list");

  $chat_list = $("#chat-list");

  $chat_user_id_span = $("#user-id");

  $settings = $("#settings");

  haveUserName = function() {
    return (server_status != null ? server_status.user_names[my_user_id] : void 0) != null;
  };

  getUserName = function() {
    return userIdToUserName(my_user_id);
  };

  userIdToUserName = function(user_id) {
    var user_name;
    if (server_status == null) return user_id;
    user_name = server_status.user_names[user_id];
    return user_name != null ? user_name : user_id;
  };

  storeMyUserIds = function() {
    return typeof localStorage !== "undefined" && localStorage !== null ? localStorage.my_user_ids = JSON.stringify(my_user_ids) : void 0;
  };

  setUserName = function(new_name) {
    new_name = $.trim(new_name);
    if (typeof localStorage !== "undefined" && localStorage !== null) {
      localStorage.user_name = new_name;
    }
    return socket.emit('SetUserName', new_name);
  };

  scrollLibraryToSelection = function() {
    var helpers;
    if ((helpers = getSelHelpers()) == null) return;
    delete helpers.playlist;
    return scrollThingToSelection($library, helpers);
  };

  scrollPlaylistToSelection = function() {
    var helpers;
    if ((helpers = getSelHelpers()) == null) return;
    delete helpers.track;
    delete helpers.artist;
    delete helpers.album;
    return scrollThingToSelection($playlist_items, helpers);
  };

  scrollThingToSelection = function($scroll_area, helpers) {
    var $div, $getDiv, bottom_pos, id, ids, item_bottom, item_top, scroll_amt, scroll_area_top, sel_name, selection_bottom, selection_top, table, top_pos, _ref;
    top_pos = null;
    bottom_pos = null;
    for (sel_name in helpers) {
      _ref = helpers[sel_name], ids = _ref[0], table = _ref[1], $getDiv = _ref[2];
      for (id in ids) {
        item_top = ($div = $getDiv(id)).offset().top;
        item_bottom = item_top + $div.height();
        if (!(top_pos != null) || item_top < top_pos) top_pos = item_top;
        if (!(bottom_pos != null) || item_bottom > bottom_pos) {
          bottom_pos = item_bottom;
        }
      }
    }
    if (top_pos != null) {
      scroll_area_top = $scroll_area.offset().top;
      selection_top = top_pos - scroll_area_top;
      selection_bottom = bottom_pos - scroll_area_top - $scroll_area.height();
      scroll_amt = $scroll_area.scrollTop();
      if (selection_top < 0) {
        return $scroll_area.scrollTop(scroll_amt + selection_top);
      } else if (selection_bottom > 0) {
        return $scroll_area.scrollTop(scroll_amt + selection_bottom);
      }
    }
  };

  selectionToFiles = function(random) {
    var file, files, key, pos, selRenderAlbum, selRenderArtist, selRenderTrack, track, track_arr, track_set;
    if (random == null) random = false;
    track_set = {};
    selRenderArtist = function(artist) {
      var album, _i, _len, _ref, _results;
      _ref = artist.albums;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        album = _ref[_i];
        _results.push(selRenderAlbum(album));
      }
      return _results;
    };
    selRenderAlbum = function(album) {
      var track, _i, _len, _ref, _results;
      _ref = album.tracks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        _results.push(selRenderTrack(track));
      }
      return _results;
    };
    selRenderTrack = function(track) {
      return track_set[track.file] = libPosToArr(getTrackSelPos(track));
    };
    for (key in selection.ids.artist) {
      selRenderArtist(mpd.search_results.artist_table[key]);
    }
    for (key in selection.ids.album) {
      selRenderAlbum(mpd.search_results.album_table[key]);
    }
    for (file in selection.ids.track) {
      selRenderTrack(mpd.search_results.track_table[file]);
    }
    if (random) {
      files = (function() {
        var _results;
        _results = [];
        for (file in track_set) {
          _results.push(file);
        }
        return _results;
      })();
      Util.shuffle(files);
      return files;
    } else {
      track_arr = (function() {
        var _results;
        _results = [];
        for (file in track_set) {
          pos = track_set[file];
          _results.push({
            file: file,
            pos: pos
          });
        }
        return _results;
      })();
      track_arr.sort(function(a, b) {
        return Util.compareArrays(a.pos, b.pos);
      });
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = track_arr.length; _i < _len; _i++) {
          track = track_arr[_i];
          _results.push(track.file);
        }
        return _results;
      })();
    }
  };

  getDragPosition = function(x, y) {
    var $item, best, distance, height, item, pos, track_id, _i, _len, _ref;
    best = {
      track_id: null,
      distance: null,
      direction: null
    };
    _ref = $playlist_items.find(".pl-item").get();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      $item = $(item);
      pos = $item.offset();
      height = $item.height();
      track_id = parseInt($item.data('id'));
      distance = Math.abs(pos.top - y);
      if (!(best.distance != null) || distance < best.distance) {
        best.distance = distance;
        best.direction = "top";
        best.track_id = track_id;
      }
      distance = Math.abs(pos.top + height - y);
      if (distance < best.distance) {
        best.distance = distance;
        best.direction = "bottom";
        best.track_id = track_id;
      }
    }
    return best;
  };

  renderSettings = function() {
    var api_key, context;
    if ((api_key = server_status != null ? server_status.lastfm_api_key : void 0) == null) {
      return;
    }
    context = {
      lastfm: {
        auth_url: "http://www.last.fm/api/auth/?api_key=" + (escape(api_key)) + "&cb=" + location.protocol + "//" + location.host + "/",
        username: typeof localStorage !== "undefined" && localStorage !== null ? localStorage.lastfm_username : void 0,
        session_key: typeof localStorage !== "undefined" && localStorage !== null ? localStorage.lastfm_session_key : void 0,
        scrobbling_on: (typeof localStorage !== "undefined" && localStorage !== null ? localStorage.lastfm_scrobbling_on : void 0) != null
      },
      auth: {
        password: typeof localStorage !== "undefined" && localStorage !== null ? localStorage.auth_password : void 0,
        show_edit: !((typeof localStorage !== "undefined" && localStorage !== null ? localStorage.auth_password : void 0) != null) || settings_ui.auth.show_edit,
        permissions: permissions
      }
    };
    $settings.html(Handlebars.templates.settings(context));
    $settings.find(".signout").button();
    $settings.find("#toggle-scrobble").button();
    $settings.find(".auth-cancel").button();
    $settings.find(".auth-save").button();
    $settings.find(".auth-edit").button();
    $settings.find(".auth-clear").button();
    return $settings.find("#auth-password").val(settings_ui.auth.password);
  };

  scrollChatWindowToBottom = function() {
    return $chat_list.scrollTop(1000000);
  };

  renderChat = function() {
    var chat_object, chat_status_text, user_id, user_objects, users, _i, _len, _ref;
    chat_status_text = "";
    if ((users = server_status != null ? server_status.users : void 0) != null) {
      if (users.length > 1) chat_status_text = " (" + users.length + ")";
      user_objects = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          user_id = users[_i];
          _results.push({
            "class": user_id === my_user_id ? "chat-user-self" : "chat-user",
            user_name: userIdToUserName(user_id)
          });
        }
        return _results;
      })();
      _ref = server_status.chats;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chat_object = _ref[_i];
        chat_object["class"] = my_user_ids[chat_object.user_id] != null ? "chat-user-self" : "chat-user";
        chat_object.user_name = userIdToUserName(chat_object.user_id);
      }
      $chat_user_list.html(Handlebars.templates.chat_user_list({
        users: user_objects
      }));
      $chat_list.html(Handlebars.templates.chat_list({
        chats: server_status.chats
      }));
      scrollChatWindowToBottom();
      $chat_user_id_span.text(chat_name_input_visible ? "" : getUserName() + ": ");
    }
    $chat_tab.find("span").text("Chat" + chat_status_text);
    return resizeChat();
  };

  renderStreamButton = function() {
    var label;
    label = trying_to_stream ? actually_streaming ? streaming_buffering ? "Stream: Buffering" : "Stream: On" : "Stream: Paused" : "Stream: Off";
    return $stream_btn.button("option", "disabled", !((server_status != null ? server_status.stream_httpd_port : void 0) != null)).button("option", "label", label).prop("checked", trying_to_stream).button("refresh");
  };

  renderPlaylistButtons = function() {
    var repeat_state;
    $dynamic_mode.prop("checked", (server_status != null ? server_status.dynamic_mode : void 0) ? true : false).button("option", "disabled", !(server_status != null ? server_status.dynamic_mode_enabled : void 0)).button("refresh");
    repeat_state = getRepeatStateName();
    $pl_btn_repeat.button("option", "label", "Repeat: " + repeat_state).prop("checked", repeat_state !== 'Off').button("refresh");
    renderStreamButton();
    $upload_tab.removeClass("ui-state-disabled");
    if (!(server_status != null ? server_status.upload_enabled : void 0)) {
      return $upload_tab.addClass("ui-state-disabled");
    }
  };

  renderPlaylist = function() {
    var context, scroll_top;
    context = {
      playlist: mpd.playlist.item_list,
      server_status: server_status
    };
    scroll_top = $playlist_items.scrollTop();
    $playlist_items.html(Handlebars.templates.playlist(context));
    refreshSelection();
    labelPlaylistItems();
    return $playlist_items.scrollTop(scroll_top);
  };

  labelPlaylistItems = function() {
    var cur_item, id, item, pos, _i, _len, _ref, _ref2, _ref3;
    cur_item = (_ref = mpd.status) != null ? _ref.current_item : void 0;
    $playlist_items.find(".pl-item").removeClass('current').removeClass('old');
    if ((cur_item != null) && (server_status != null ? server_status.dynamic_mode : void 0)) {
      for (pos = 0, _ref2 = cur_item.pos; 0 <= _ref2 ? pos < _ref2 : pos > _ref2; 0 <= _ref2 ? pos++ : pos--) {
        id = mpd.playlist.item_list[pos].id;
        $("#playlist-track-" + id).addClass('old');
      }
    }
    if ((server_status != null ? server_status.random_ids : void 0) != null) {
      _ref3 = mpd.playlist.item_list;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        item = _ref3[_i];
        if (server_status.random_ids[item.id]) {
          $("#playlist-track-" + item.id).addClass('random');
        }
      }
    }
    if (cur_item != null) {
      return $("#playlist-track-" + cur_item.id).addClass('current');
    }
  };

  getSelHelpers = function() {
    var _ref, _ref2;
    if ((mpd != null ? (_ref = mpd.playlist) != null ? _ref.item_table : void 0 : void 0) == null) {
      return null;
    }
    if ((mpd != null ? (_ref2 = mpd.search_results) != null ? _ref2.artist_table : void 0 : void 0) == null) {
      return null;
    }
    return {
      playlist: [
        selection.ids.playlist, mpd.playlist.item_table, function(id) {
          return $("#playlist-track-" + id);
        }
      ],
      artist: [
        selection.ids.artist, mpd.search_results.artist_table, function(id) {
          return $("#lib-artist-" + (Util.toHtmlId(id)));
        }
      ],
      album: [
        selection.ids.album, mpd.search_results.album_table, function(id) {
          return $("#lib-album-" + (Util.toHtmlId(id)));
        }
      ],
      track: [
        selection.ids.track, mpd.search_results.track_table, function(id) {
          return $("#lib-track-" + (Util.toHtmlId(id)));
        }
      ]
    };
  };

  refreshSelection = function() {
    var $getDiv, helpers, id, ids, sel_name, table, _i, _len, _ref, _ref2, _results;
    if ((helpers = getSelHelpers()) == null) return;
    $playlist_items.find(".pl-item").removeClass('selected').removeClass('cursor');
    $library.find(".artist").removeClass('selected').removeClass('cursor');
    $library.find(".album").removeClass('selected').removeClass('cursor');
    $library.find(".track").removeClass('selected').removeClass('cursor');
    if (selection.type == null) return;
    _results = [];
    for (sel_name in helpers) {
      _ref = helpers[sel_name], ids = _ref[0], table = _ref[1], $getDiv = _ref[2];
      _ref2 = (function() {
        var _results2;
        _results2 = [];
        for (id in ids) {
          if (!(table[id] != null)) _results2.push(id);
        }
        return _results2;
      })();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        id = _ref2[_i];
        delete ids[id];
      }
      for (id in ids) {
        $getDiv(id).addClass('selected');
      }
      if ((selection.cursor != null) && sel_name === selection.type) {
        _results.push($getDiv(selection.cursor).addClass('cursor'));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  renderLibrary = function() {
    var $artists, context, expand_stuff, node_count, node_count_limit, scroll_top;
    context = {
      artists: mpd.search_results.artists,
      empty_library_message: mpd.haveFileListCache ? "No Results" : "loading..."
    };
    scroll_top = $library.scrollTop();
    $library.html(Handlebars.templates.library(context));
    $artists = $library.children("ul").children("li");
    node_count = $artists.length;
    node_count_limit = 20;
    expand_stuff = function($li_set) {
      var $li, $sub_li_set, $ul, li, proposed_node_count, _i, _len;
      for (_i = 0, _len = $li_set.length; _i < _len; _i++) {
        li = $li_set[_i];
        $li = $(li);
        if (node_count >= node_count_limit) return;
        $ul = $li.children("ul");
        $sub_li_set = $ul.children("li");
        proposed_node_count = node_count + $sub_li_set.length;
        if (proposed_node_count <= node_count_limit) {
          toggleExpansion($li);
          $ul = $li.children("ul");
          $sub_li_set = $ul.children("li");
          node_count = proposed_node_count;
          expand_stuff($sub_li_set);
        }
      }
    };
    expand_stuff($artists);
    $library.scrollTop(scroll_top);
    return refreshSelection();
  };

  getCurrentTrackPosition = function() {
    if ((mpd.status.track_start_date != null) && mpd.status.state === "play") {
      return (new Date() - mpd.status.track_start_date) / 1000;
    } else {
      return mpd.status.elapsed;
    }
  };

  updateSliderPos = function() {
    var disabled, elapsed, slider_pos, time, _ref, _ref2, _ref3, _ref4;
    if (user_is_seeking) return;
    if (((time = (_ref = mpd.status) != null ? _ref.time : void 0) != null) && (((_ref2 = mpd.status) != null ? _ref2.current_item : void 0) != null) && ((_ref3 = (_ref4 = mpd.status) != null ? _ref4.state : void 0) != null ? _ref3 : "stop") !== "stop") {
      disabled = false;
      elapsed = getCurrentTrackPosition();
      slider_pos = elapsed / time;
    } else {
      disabled = true;
      elapsed = time = slider_pos = 0;
    }
    $track_slider.slider("option", "disabled", disabled).slider("option", "value", slider_pos);
    $nowplaying_elapsed.html(Util.formatTime(elapsed));
    return $nowplaying_left.html(Util.formatTime(time));
  };

  renderNowPlaying = function() {
    var enabled, new_class, old_class, state, toggle_icon, track, track_display, vol, _ref, _ref2, _ref3, _ref4;
    if ((track = (_ref = mpd.status.current_item) != null ? _ref.track : void 0) != null) {
      track_display = "" + track.name + " - " + track.artist_name;
      if (track.album_name.length) track_display += " - " + track.album_name;
      document.title = "" + track_display + " - " + base_title;
      if (track.name === "Groove Basin" && track.artist_name === "Rayza") {
        $("html").addClass('groovebasin');
      } else {
        $("html").removeClass('groovebasin');
      }
      if (track.name === "Never Gonna Give You Up" && track.artist_name === "Rick Astley") {
        $("html").addClass('nggyu');
      } else {
        $("html").removeClass('nggyu');
      }
    } else {
      track_display = "&nbsp;";
      document.title = base_title;
    }
    $("#track-display").html(track_display);
    state = (_ref2 = mpd.status.state) != null ? _ref2 : "stop";
    toggle_icon = {
      play: ['ui-icon-play', 'ui-icon-pause'],
      stop: ['ui-icon-pause', 'ui-icon-play'],
      pause: ['ui-icon-pause', 'ui-icon-play']
    };
    _ref3 = toggle_icon[state], old_class = _ref3[0], new_class = _ref3[1];
    $nowplaying.find(".toggle span").removeClass(old_class).addClass(new_class);
    $track_slider.slider("option", "disabled", state === "stop");
    updateSliderPos();
    if (!user_is_volume_sliding) {
      enabled = (vol = (_ref4 = mpd.status) != null ? _ref4.volume : void 0) != null;
      if (enabled) $vol_slider.slider('option', 'value', vol);
      return $vol_slider.slider('option', 'disabled', !enabled);
    }
  };

  render = function() {
    $("#playlist-window").toggle(mpd_alive);
    $("#left-window").toggle(mpd_alive);
    $("#nowplaying").toggle(mpd_alive);
    $("#mpd-error").toggle(!mpd_alive);
    if (!mpd_alive) {
      document.title = base_title;
      return;
    }
    renderPlaylist();
    renderPlaylistButtons();
    renderLibrary();
    renderNowPlaying();
    renderChat();
    renderSettings();
    return handleResize();
  };

  toggleExpansion = function($li) {
    var $div, $ul, new_class, old_class, _ref;
    $div = $li.find("> div");
    $ul = $li.find("> ul");
    if ($div.hasClass('artist')) {
      if (!$li.data('cached')) {
        $li.data('cached', true);
        $ul.html(Handlebars.templates.albums({
          albums: mpd.getArtistAlbums($div.find("span").text())
        }));
        $ul.toggle();
        refreshSelection();
      }
    }
    $ul.toggle();
    old_class = 'ui-icon-triangle-1-se';
    new_class = 'ui-icon-triangle-1-e';
    if ($ul.is(":visible")) {
      _ref = [old_class, new_class], new_class = _ref[0], old_class = _ref[1];
    }
    $div.find("div").removeClass(old_class).addClass(new_class);
    return false;
  };

  confirmDelete = function(files_list) {
    var list_text, song_text;
    list_text = files_list.slice(0, 7).join("\n  ");
    if (files_list.length > 7) list_text += "\n  ...";
    song_text = files_list.length === 1 ? "song" : "songs";
    return confirm("You are about to delete " + files_list.length + " " + song_text + " permanently:\n\n  " + list_text);
  };

  handleDeletePressed = function(shift) {
    var files_list, id, pos;
    if (selection.isLibrary()) {
      files_list = selectionToFiles();
      if (!confirmDelete(files_list)) return;
      return socket.emit('DeleteFromLibrary', JSON.stringify(files_list));
    } else if (selection.isPlaylist()) {
      if (shift) {
        files_list = (function() {
          var _results;
          _results = [];
          for (id in selection.ids.playlist) {
            _results.push(mpd.playlist.item_table[id].track.file);
          }
          return _results;
        })();
        if (!confirmDelete(files_list)) return;
        socket.emit('DeleteFromLibrary', JSON.stringify(files_list));
      }
      pos = mpd.playlist.item_table[selection.cursor].pos;
      mpd.removeIds((function() {
        var _results;
        _results = [];
        for (id in selection.ids.playlist) {
          _results.push(id);
        }
        return _results;
      })());
      if (pos >= mpd.playlist.item_list.length) {
        pos = mpd.playlist.item_list.length - 1;
      }
      if (pos > -1) {
        selection.selectOnly('playlist', mpd.playlist.item_list[pos].id);
      }
      return refreshSelection();
    }
  };

  toggleStreamStatus = function() {
    if ((server_status != null ? server_status.stream_httpd_port : void 0) == null) {
      return;
    }
    trying_to_stream = !trying_to_stream;
    renderStreamButton();
    updateStreamingPlayer();
    return false;
  };

  updateStreamingPlayer = function() {
    var format, port, should_stream, sound, stream_url;
    should_stream = trying_to_stream && mpd.status.state === "play";
    if (actually_streaming === should_stream) return;
    if (should_stream) {
      format = server_status.stream_httpd_format;
      port = server_status != null ? server_status.stream_httpd_port : void 0;
      stream_url = "" + location.protocol + "//" + location.hostname + ":" + port + "/stream." + format;
      soundManager.destroySound('stream');
      sound = soundManager.createSound({
        id: 'stream',
        url: stream_url,
        onbufferchange: function() {
          streaming_buffering = sound.isBuffering;
          return renderStreamButton();
        }
      });
      sound.play();
      streaming_buffering = sound.isBuffering;
    } else {
      soundManager.destroySound('stream');
      streaming_buffering = false;
    }
    actually_streaming = should_stream;
    return renderStreamButton();
  };

  togglePlayback = function() {
    if (mpd.status.state === 'play') {
      return mpd.pause();
    } else {
      return mpd.play();
    }
  };

  setDynamicMode = function(value) {
    var args;
    args = {
      dynamic_mode: value
    };
    return socket.emit('DynamicMode', JSON.stringify(args));
  };

  toggleDynamicMode = function() {
    return setDynamicMode(!server_status.dynamic_mode);
  };

  getRepeatStateName = function() {
    if (!mpd.status.repeat) {
      return "Off";
    } else if (mpd.status.repeat && !mpd.status.single) {
      return "All";
    } else {
      return "One";
    }
  };

  nextRepeatState = function() {
    if (!mpd.status.repeat) {
      return mpd.changeStatus({
        repeat: true,
        single: true
      });
    } else if (mpd.status.repeat && !mpd.status.single) {
      return mpd.changeStatus({
        repeat: false,
        single: false
      });
    } else {
      return mpd.changeStatus({
        repeat: true,
        single: false
      });
    }
  };

  keyboard_handlers = (function() {
    var handlers, leftRightHandler, upDownHandler;
    upDownHandler = function(event) {
      var default_index, dir, id, next_pos;
      if (event.keyCode === 38) {
        default_index = mpd.playlist.item_list.length - 1;
        dir = -1;
      } else {
        default_index = 0;
        dir = 1;
      }
      if (event.ctrlKey) {
        if (selection.isPlaylist()) {
          mpd.shiftIds((function() {
            var _results;
            _results = [];
            for (id in selection.ids.playlist) {
              _results.push(id);
            }
            return _results;
          })(), dir);
        }
      } else {
        if (selection.isPlaylist()) {
          next_pos = mpd.playlist.item_table[selection.cursor].pos + dir;
          if (next_pos < 0 || next_pos >= mpd.playlist.item_list.length) return;
          selection.cursor = mpd.playlist.item_list[next_pos].id;
          if (!event.shiftKey) selection.clear();
          selection.ids.playlist[selection.cursor] = true;
        } else if (selection.isLibrary()) {
          next_pos = getLibSelPos(selection.type, selection.cursor);
          if (dir > 0) {
            nextLibPos(next_pos);
          } else {
            prevLibPos(next_pos);
          }
          if (!(next_pos.artist != null)) return;
          if (!event.shiftKey) selection.clear();
          if (next_pos.track != null) {
            selection.type = 'track';
            selection.cursor = next_pos.track.file;
          } else if (next_pos.album != null) {
            selection.type = 'album';
            selection.cursor = next_pos.album.key;
          } else {
            selection.type = 'artist';
            selection.cursor = mpd.artistKey(next_pos.artist.name);
          }
          selection.ids[selection.type][selection.cursor] = true;
        } else {
          selection.selectOnly('playlist', mpd.playlist.item_list[default_index].id);
        }
        refreshSelection();
      }
      if (selection.isPlaylist()) scrollPlaylistToSelection();
      if (selection.isLibrary()) return scrollLibraryToSelection();
    };
    leftRightHandler = function(event) {
      var $getDiv, $li, cursor_pos, dir, helpers, ids, is_expanded, is_expanded_funcs, selected_item, table, _ref;
      dir = event.keyCode === 37 ? -1 : 1;
      if (selection.isLibrary()) {
        if (!(helpers = getSelHelpers())) return;
        _ref = helpers[selection.type], ids = _ref[0], table = _ref[1], $getDiv = _ref[2];
        selected_item = table[selection.cursor];
        is_expanded_funcs = {
          artist: isArtistExpanded,
          album: isAlbumExpanded,
          track: function() {
            return true;
          }
        };
        is_expanded = is_expanded_funcs[selection.type](selected_item);
        $li = $getDiv(selection.cursor).closest("li");
        cursor_pos = getLibSelPos(selection.type, selection.cursor);
        if (dir > 0) {
          if (!is_expanded) return toggleExpansion($li);
        } else {
          if (is_expanded) return toggleExpansion($li);
        }
      } else {
        if (event.ctrlKey) {
          if (dir > 0) {
            return mpd.next();
          } else {
            return mpd.prev();
          }
        } else if (event.shiftKey) {
          return mpd.seek(getCurrentTrackPosition() + dir * mpd.status.time * 0.10);
        } else {
          return mpd.seek(getCurrentTrackPosition() + dir * 10);
        }
      }
    };
    return handlers = {
      13: {
        ctrl: false,
        alt: null,
        shift: null,
        handler: function(event) {
          if (selection.isPlaylist()) {
            return mpd.playId(selection.cursor);
          } else if (selection.isLibrary()) {
            return queueLibSelection(event);
          }
        }
      },
      27: {
        ctrl: false,
        alt: false,
        shift: false,
        handler: function() {
          if (started_drag) {
            abortDrag();
            return;
          }
          if ($("#menu").get().length > 0) {
            removeContextMenu();
            return;
          }
          selection.fullClear();
          return refreshSelection();
        }
      },
      32: {
        ctrl: false,
        alt: false,
        shift: false,
        handler: togglePlayback
      },
      37: {
        ctrl: null,
        alt: false,
        shift: null,
        handler: leftRightHandler
      },
      38: {
        ctrl: null,
        alt: false,
        shift: null,
        handler: upDownHandler
      },
      39: {
        ctrl: null,
        alt: false,
        shift: null,
        handler: leftRightHandler
      },
      40: {
        ctrl: null,
        alt: false,
        shift: null,
        handler: upDownHandler
      },
      46: {
        ctrl: false,
        alt: false,
        shift: null,
        handler: function(event) {
          return handleDeletePressed(event.shiftKey);
        }
      },
      67: {
        ctrl: false,
        alt: false,
        shift: true,
        handler: function() {
          return mpd.clear();
        }
      },
      68: {
        ctrl: false,
        alt: false,
        shift: false,
        handler: toggleDynamicMode
      },
      72: {
        ctrl: false,
        alt: false,
        shift: true,
        handler: function() {
          return mpd.shuffle();
        }
      },
      76: {
        ctrl: false,
        alt: false,
        shift: false,
        handler: function() {
          return clickTab('library');
        }
      },
      82: {
        ctrl: false,
        alt: false,
        shift: false,
        handler: nextRepeatState
      },
      83: {
        ctrl: false,
        alt: false,
        shift: false,
        handler: toggleStreamStatus
      },
      84: {
        ctrl: false,
        alt: false,
        shift: false,
        handler: function() {
          clickTab('chat');
          return $("#chat-input").focus().select();
        }
      },
      85: {
        ctrl: false,
        alt: false,
        shift: false,
        handler: function() {
          return clickTab('upload');
        }
      },
      187: {
        ctrl: false,
        alt: false,
        shift: null,
        handler: function() {
          return mpd.setVolume(mpd.status.volume + 0.10);
        }
      },
      188: {
        ctrl: false,
        alt: false,
        shift: null,
        handler: function() {
          return mpd.prev();
        }
      },
      189: {
        ctrl: false,
        alt: false,
        shift: null,
        handler: function() {
          return mpd.setVolume(mpd.status.volume - 0.10);
        }
      },
      190: {
        ctrl: false,
        alt: false,
        shift: null,
        handler: function() {
          return mpd.next();
        }
      },
      191: {
        ctrl: false,
        alt: false,
        shift: null,
        handler: function(event) {
          if (event.shiftKey) {
            $(Handlebars.templates.shortcuts()).appendTo(document.body);
            return $("#shortcuts").dialog({
              modal: true,
              title: "Keyboard Shortcuts",
              minWidth: 600,
              height: $document.height() - 40,
              close: function() {
                return $("#shortcuts").remove();
              }
            });
          } else {
            clickTab('library');
            return $("#lib-filter").focus().select();
          }
        }
      }
    };
  })();

  removeContextMenu = function() {
    return $("#menu").remove();
  };

  isArtistExpanded = function(artist) {
    var $li;
    $li = $("#lib-artist-" + (Util.toHtmlId(mpd.artistKey(artist.name)))).closest("li");
    if (!$li.data('cached')) return false;
    return $li.find("> ul").is(":visible");
  };

  isAlbumExpanded = function(album) {
    var $li;
    $li = $("#lib-album-" + (Util.toHtmlId(album.key))).closest("li");
    return $li.find("> ul").is(":visible");
  };

  getTrackSelPos = function(track) {
    return {
      artist: track.album.artist,
      album: track.album,
      track: track
    };
  };

  getLibSelPos = function(type, key) {
    var val;
    val = {
      artist: null,
      album: null,
      track: null
    };
    if (key != null) {
      switch (type) {
        case 'track':
          val.track = mpd.search_results.track_table[key];
          val.album = val.track.album;
          val.artist = val.album.artist;
          break;
        case 'album':
          val.album = mpd.search_results.album_table[key];
          val.artist = val.album.artist;
          break;
        case 'artist':
          val.artist = mpd.search_results.artist_table[key];
      }
    } else {
      val.artist = mpd.search_results.artists[0];
    }
    return val;
  };

  libPosToArr = function(lib_pos) {
    var _ref, _ref2, _ref3;
    return [(_ref = lib_pos.artist) != null ? _ref.pos : void 0, (_ref2 = lib_pos.album) != null ? _ref2.pos : void 0, (_ref3 = lib_pos.track) != null ? _ref3.pos : void 0];
  };

  prevLibPos = function(lib_pos) {
    if (lib_pos.track != null) {
      return lib_pos.track = lib_pos.track.album.tracks[lib_pos.track.pos - 1];
    } else if (lib_pos.album != null) {
      lib_pos.album = lib_pos.artist.albums[lib_pos.album.pos - 1];
      if ((lib_pos.album != null) && isAlbumExpanded(lib_pos.album)) {
        return lib_pos.track = lib_pos.album.tracks[lib_pos.album.tracks.length - 1];
      }
    } else if (lib_pos.artist != null) {
      lib_pos.artist = mpd.search_results.artists[lib_pos.artist.pos - 1];
      if ((lib_pos.artist != null) && isArtistExpanded(lib_pos.artist)) {
        lib_pos.album = lib_pos.artist.albums[lib_pos.artist.albums.length - 1];
        if ((lib_pos.album != null) && isAlbumExpanded(lib_pos.album)) {
          return lib_pos.track = lib_pos.album.tracks[lib_pos.album.tracks.length - 1];
        }
      }
    }
  };

  nextLibPos = function(lib_pos) {
    if (lib_pos.track != null) {
      lib_pos.track = lib_pos.track.album.tracks[lib_pos.track.pos + 1];
      if (!(lib_pos.track != null)) {
        lib_pos.album = lib_pos.artist.albums[lib_pos.album.pos + 1];
        if (!(lib_pos.album != null)) {
          return lib_pos.artist = mpd.search_results.artists[lib_pos.artist.pos + 1];
        }
      }
    } else if (lib_pos.album != null) {
      if (isAlbumExpanded(lib_pos.album)) {
        return lib_pos.track = lib_pos.album.tracks[0];
      } else {
        lib_pos.artist = mpd.search_results.artists[lib_pos.artist.pos + 1];
        return lib_pos.album = null;
      }
    } else if (lib_pos.artist != null) {
      if (isArtistExpanded(lib_pos.artist)) {
        return lib_pos.album = lib_pos.artist.albums[0];
      } else {
        return lib_pos.artist = mpd.search_results.artists[lib_pos.artist.pos + 1];
      }
    }
  };

  selectLibraryPosition = function(lib_pos) {
    if (lib_pos.track != null) {
      return selection.ids.track[lib_pos.track.file] = true;
    } else if (lib_pos.album != null) {
      return selection.ids.album[lib_pos.album.key] = true;
    } else if (lib_pos.artist != null) {
      return selection.ids.artist[mpd.artistKey(lib_pos.artist.name)] = true;
    }
  };

  queueFilesPos = function() {
    var i, item, pos, _len, _ref;
    pos = mpd.playlist.item_list.length;
    if (server_status == null) return pos;
    _ref = mpd.playlist.item_list;
    for (i = 0, _len = _ref.length; i < _len; i++) {
      item = _ref[i];
      if (server_status.random_ids[item.id] != null) return i;
    }
  };

  queueLibSelection = function(event) {
    var files;
    files = selectionToFiles(event.altKey);
    if (event.shiftKey) {
      mpd.queueFilesNext(files);
    } else {
      mpd.queueFiles(files, queueFilesPos());
    }
    return false;
  };

  settings_ui = {
    auth: {
      show_edit: false,
      password: ""
    }
  };

  sendAuth = function() {
    var pass;
    if (!((pass = typeof localStorage !== "undefined" && localStorage !== null ? localStorage.auth_password : void 0) != null)) {
      return;
    }
    mpd.authenticate(pass);
    return socket.emit('Password', pass);
  };

  settingsAuthSave = function() {
    var $text_box;
    settings_ui.auth.show_edit = false;
    $text_box = $("#auth-password");
    if (typeof localStorage !== "undefined" && localStorage !== null) {
      localStorage.auth_password = $text_box.val();
    }
    renderSettings();
    return sendAuth();
  };

  settingsAuthCancel = function() {
    settings_ui.auth.show_edit = false;
    return renderSettings();
  };

  performDrag = function(event, callbacks) {
    var onDragEnd, onDragMove, start_drag_x, start_drag_y;
    abortDrag();
    start_drag_x = event.pageX;
    start_drag_y = event.pageY;
    abortDrag = function() {
      $document.off('mousemove', onDragMove).off('mouseup', onDragEnd);
      if (started_drag) {
        $playlist_items.find(".pl-item").removeClass('border-top').removeClass('border-bottom');
        started_drag = false;
      }
      return abortDrag = function() {};
    };
    onDragMove = function(event) {
      var dist, result;
      if (!started_drag) {
        dist = Math.pow(event.pageX - start_drag_x, 2) + Math.pow(event.pageY - start_drag_y, 2);
        if (dist > 64) started_drag = true;
        if (!started_drag) return;
      }
      result = getDragPosition(event.pageX, event.pageY);
      $playlist_items.find(".pl-item").removeClass('border-top').removeClass('border-bottom');
      return $("#playlist-track-" + result.track_id).addClass("border-" + result.direction);
    };
    onDragEnd = function(event) {
      if (event.button !== 0) return false;
      if (started_drag) {
        callbacks.complete(getDragPosition(event.pageX, event.pageY), event);
      } else {
        callbacks.cancel();
      }
      return abortDrag();
    };
    $document.on('mousemove', onDragMove).on('mouseup', onDragEnd);
    return onDragMove(event);
  };

  setUpUi = function() {
    var $chat_input, $chat_name_input, $lib_filter, $pl_window, action, actions, cls, libraryMouseDown, setVol, tab, tabs, unselectTabs, uploader, _fn, _fn2, _i, _len;
    $document.on('mouseover', '.hoverable', function(event) {
      return $(this).addClass("ui-state-hover");
    });
    $document.on('mouseout', '.hoverable', function(event) {
      return $(this).removeClass("ui-state-hover");
    });
    $(".jquery-button").button();
    $pl_window = $("#playlist-window");
    $pl_window.on('click', 'button.clear', function() {
      return mpd.clear();
    });
    $pl_window.on('click', 'button.shuffle', function() {
      return mpd.shuffle();
    });
    $pl_btn_repeat.on('click', function() {
      return nextRepeatState();
    });
    $dynamic_mode.on('click', function() {
      var value;
      value = $(this).prop("checked");
      setDynamicMode(value);
      return false;
    });
    $playlist_items.on('dblclick', '.pl-item', function(event) {
      var track_id;
      track_id = $(this).data('id');
      return mpd.playId(track_id);
    });
    $playlist_items.on('contextmenu', function(event) {
      return event.altKey;
    });
    $playlist_items.on('mousedown', '.pl-item', function(event) {
      var $menu, context, i, new_pos, old_pos, skip_drag, track_id;
      if (started_drag) return true;
      $(document.activeElement).blur();
      if (event.button === 0) {
        event.preventDefault();
        removeContextMenu();
        track_id = $(this).data('id');
        skip_drag = false;
        if (!selection.isPlaylist()) {
          selection.selectOnly('playlist', track_id);
        } else if (event.ctrlKey || event.shiftKey) {
          skip_drag = true;
          if (event.shiftKey && !event.ctrlKey) selection.clear();
          if (event.shiftKey) {
            old_pos = selection.cursor != null ? mpd.playlist.item_table[selection.cursor].pos : 0;
            new_pos = mpd.playlist.item_table[track_id].pos;
            for (i = old_pos; old_pos <= new_pos ? i <= new_pos : i >= new_pos; old_pos <= new_pos ? i++ : i--) {
              selection.ids.playlist[mpd.playlist.item_list[i].id] = true;
            }
          } else if (event.ctrlKey) {
            if (selection.ids.playlist[track_id] != null) {
              delete selection.ids.playlist[track_id];
            } else {
              selection.ids.playlist[track_id] = true;
            }
            selection.cursor = track_id;
          }
        } else if (!(selection.ids.playlist[track_id] != null)) {
          selection.selectOnly('playlist', track_id);
        }
        refreshSelection();
        if (!skip_drag) {
          return performDrag(event, {
            complete: function(result, event) {
              var delta, id;
              delta = {
                top: 0,
                bottom: 1
              };
              new_pos = mpd.playlist.item_table[result.track_id].pos + delta[result.direction];
              return mpd.moveIds((function() {
                var _results;
                _results = [];
                for (id in selection.ids.playlist) {
                  _results.push(id);
                }
                return _results;
              })(), new_pos);
            },
            cancel: function() {
              selection.selectOnly('playlist', track_id);
              return refreshSelection();
            }
          });
        }
      } else if (event.button === 2) {
        if (event.altKey) return;
        event.preventDefault();
        removeContextMenu();
        track_id = parseInt($(this).data('id'));
        if (!selection.isPlaylist() || !(selection.ids.playlist[track_id] != null)) {
          selection.selectOnly('playlist', track_id);
          refreshSelection();
        }
        context = {
          item: mpd.playlist.item_table[track_id],
          status: server_status,
          permissions: permissions
        };
        $(Handlebars.templates.playlist_menu(context)).appendTo(document.body);
        $menu = $("#menu");
        $menu.offset({
          left: event.pageX + 1,
          top: event.pageY + 1
        });
        $menu.on('mousedown', function() {
          return false;
        });
        $menu.on('click', '.remove', function() {
          handleDeletePressed(false);
          removeContextMenu();
          return false;
        });
        $menu.on('click', '.download', function() {
          removeContextMenu();
          return true;
        });
        return $menu.on('click', '.delete', function() {
          handleDeletePressed(true);
          removeContextMenu();
          return false;
        });
      }
    });
    $playlist_items.on('mousedown', function() {
      return false;
    });
    $document.on('mousedown', function() {
      removeContextMenu();
      selection.type = null;
      return refreshSelection();
    });
    $document.on('keydown', function(event) {
      var handler;
      if (((handler = keyboard_handlers[event.keyCode]) != null) && (!(handler.ctrl != null) || handler.ctrl === event.ctrlKey) && (!(handler.alt != null) || handler.alt === event.altKey) && (!(handler.shift != null) || handler.shift === event.shiftKey)) {
        handler.handler(event);
        return false;
      }
      return true;
    });
    $library.on('mousedown', 'div.expandable > div.ui-icon', function(event) {
      toggleExpansion($(this).closest("li"));
      return false;
    });
    $library.on('dblclick', 'div.expandable > div.ui-icon', function() {
      return false;
    });
    $library.on('dblclick', 'div.artist, div.album, div.track', queueLibSelection);
    $library.on('contextmenu', function(event) {
      return event.altKey;
    });
    libraryMouseDown = function(event, sel_name, key) {
      var $menu, context, libraryPositionEqual, new_arr, new_pos, old_arr, old_pos, skip_drag, _ref;
      $(document.activeElement).blur();
      if (event.button === 0) {
        event.preventDefault();
        removeContextMenu();
        skip_drag = false;
        if (!selection.isLibrary()) {
          selection.selectOnly(sel_name, key);
        } else if (event.ctrlKey || event.shiftKey) {
          skip_drag = true;
          if (event.shiftKey && !event.ctrlKey) selection.clear();
          if (event.shiftKey) {
            old_pos = getLibSelPos(selection.type, selection.cursor);
            new_pos = getLibSelPos(sel_name, key);
            new_arr = libPosToArr(new_pos);
            old_arr = libPosToArr(old_pos);
            if (Util.compareArrays(old_arr, new_arr) > 0) {
              _ref = [new_pos, old_pos], old_pos = _ref[0], new_pos = _ref[1];
            }
            libraryPositionEqual = function(old_pos, new_pos) {
              old_arr = libPosToArr(old_pos);
              new_arr = libPosToArr(new_pos);
              return Util.compareArrays(old_arr, new_arr) === 0;
            };
            while (old_pos.artist != null) {
              selectLibraryPosition(old_pos);
              if (libraryPositionEqual(old_pos, new_pos)) break;
              nextLibPos(old_pos);
            }
          } else if (event.ctrlKey) {
            if (selection.ids[sel_name][key] != null) {
              delete selection.ids[sel_name][key];
            } else {
              selection.ids[sel_name][key] = true;
            }
            selection.cursor = key;
            selection.type = sel_name;
          }
        } else if (!(selection.ids[sel_name][key] != null)) {
          selection.selectOnly(sel_name, key);
        }
        refreshSelection();
        if (!skip_drag) {
          return performDrag(event, {
            complete: function(result, event) {
              var delta, files;
              delta = {
                top: 0,
                bottom: 1
              };
              new_pos = mpd.playlist.item_table[result.track_id].pos + delta[result.direction];
              files = selectionToFiles(event.altKey);
              return mpd.queueFiles(files, new_pos);
            },
            cancel: function() {
              selection.selectOnly(sel_name, key);
              return refreshSelection();
            }
          });
        }
      } else if (event.button = 2) {
        if (event.altKey) return;
        event.preventDefault();
        removeContextMenu();
        if (!selection.isLibrary() || !(selection.ids[sel_name][key] != null)) {
          selection.selectOnly(sel_name, key);
          refreshSelection();
        }
        context = {
          status: server_status,
          permissions: permissions
        };
        if (sel_name === 'track') {
          context.track = mpd.search_results.track_table[key];
        }
        $(Handlebars.templates.library_menu(context)).appendTo(document.body);
        $menu = $("#menu");
        $menu.offset({
          left: event.pageX + 1,
          top: event.pageY + 1
        });
        $menu.on('mousedown', function() {
          return false;
        });
        $menu.on('click', '.queue', function() {
          mpd.queueFiles(selectionToFiles());
          removeContextMenu();
          return false;
        });
        $menu.on('click', '.queue-next', function() {
          mpd.queueFilesNext(selectionToFiles());
          removeContextMenu();
          return false;
        });
        $menu.on('click', '.queue-random', function() {
          mpd.queueFiles(selectionToFiles(true));
          removeContextMenu();
          return false;
        });
        $menu.on('click', '.queue-next-random', function() {
          mpd.queueFilesNext(selectionToFiles(true));
          removeContextMenu();
          return false;
        });
        $menu.on('click', '.download', function() {
          removeContextMenu();
          return true;
        });
        return $menu.on('click', '.delete', function() {
          handleDeletePressed(true);
          removeContextMenu();
          return false;
        });
      }
    };
    $library.on('mousedown', '.artist', function(event) {
      var artist_key;
      artist_key = mpd.artistKey($(this).find("span").text());
      return libraryMouseDown(event, 'artist', artist_key);
    });
    $library.on('mousedown', '.album', function(event) {
      return libraryMouseDown(event, 'album', $(this).data('key'));
    });
    $library.on('mousedown', '.track', function(event) {
      return libraryMouseDown(event, 'track', $(this).data('file'));
    });
    $library.on('mousedown', function() {
      return false;
    });
    $lib_filter = $("#lib-filter");
    $lib_filter.on('keydown', function(event) {
      var album, artist, files, track, _i, _j, _k, _len, _len2, _len3, _ref, _ref2, _ref3;
      event.stopPropagation();
      switch (event.keyCode) {
        case 27:
          if ($(event.target).val().length === 0) {
            $(event.target).blur();
          } else {
            Util.wait(0, function() {
              $(event.target).val("");
              return mpd.search("");
            });
          }
          return false;
        case 13:
          files = [];
          _ref = mpd.search_results.artists;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            artist = _ref[_i];
            _ref2 = artist.albums;
            for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
              album = _ref2[_j];
              _ref3 = album.tracks;
              for (_k = 0, _len3 = _ref3.length; _k < _len3; _k++) {
                track = _ref3[_k];
                files.push(track.file);
              }
            }
          }
          if (event.altKey) Util.shuffle(files);
          if (files.length > 2000) {
            if (!confirm("You are about to queue " + files.length + " songs.")) {
              return false;
            }
          }
          if (event.shiftKey) {
            mpd.queueFilesNext(files);
          } else {
            mpd.queueFiles(files, queueFilesPos());
          }
          return false;
        case 40:
          selection.selectOnly('artist', mpd.artistKey(mpd.search_results.artists[0].name));
          refreshSelection();
          $lib_filter.blur();
          return false;
        case 38:
          selection.selectOnly('artist', mpd.artistKey(mpd.search_results.artists[mpd.search_results.artists.length - 1].name));
          refreshSelection();
          $lib_filter.blur();
          return false;
      }
    });
    $lib_filter.on('keyup', function(event) {
      return mpd.search($(event.target).val());
    });
    $chat_name_input = $("#chat-name-input");
    $chat_user_id_span.on('click', function(event) {
      $chat_input.attr("disabled", "disabled");
      chat_name_input_visible = true;
      $chat_name_input.show().val("").focus().select();
      return renderChat();
    });
    $chat_name_input.on('keydown', function(event) {
      var done;
      event.stopPropagation();
      if (event.keyCode === 27) {
        done = true;
      } else if (event.keyCode === 13) {
        done = true;
        setUserName($(event.target).val());
      }
      if (done) {
        chat_name_input_visible = false;
        $chat_name_input.hide();
        $chat_input.removeAttr("disabled").focus().select();
        renderChat();
        return false;
      }
    });
    $chat_input = $("#chat-input");
    $chat_input.on('keydown', function(event) {
      var NICK, message, new_user_name;
      event.stopPropagation();
      if (event.keyCode === 27) {
        $(event.target).blur();
        return false;
      } else if (event.keyCode === 13) {
        message = $.trim($(event.target).val());
        Util.wait(0, function() {
          return $(event.target).val("");
        });
        if (message === "") return false;
        if (!haveUserName()) new_user_name = message;
        NICK = "/nick ";
        if (message.substr(0, NICK.length) === NICK) {
          new_user_name = message.substr(NICK.length);
        }
        if (new_user_name != null) {
          setUserName(new_user_name);
          return false;
        }
        socket.emit('Chat', message);
        return false;
      }
    });
    actions = {
      'toggle': togglePlayback,
      'prev': mpd.prev,
      'next': mpd.next,
      'stop': mpd.stop
    };
    $nowplaying = $("#nowplaying");
    _fn = function(cls, action) {
      return $nowplaying.on('mousedown', "li." + cls, function(event) {
        action();
        return false;
      });
    };
    for (cls in actions) {
      action = actions[cls];
      _fn(cls, action);
    }
    $track_slider.slider({
      step: 0.0001,
      min: 0,
      max: 1,
      change: function(event, ui) {
        if (!(event.originalEvent != null)) return;
        return mpd.seek(ui.value * mpd.status.time);
      },
      slide: function(event, ui) {
        return $nowplaying_elapsed.html(Util.formatTime(ui.value * mpd.status.time));
      },
      start: function(event, ui) {
        return user_is_seeking = true;
      },
      stop: function(event, ui) {
        return user_is_seeking = false;
      }
    });
    setVol = function(event, ui) {
      if (!(event.originalEvent != null)) return;
      return mpd.setVolume(ui.value);
    };
    $vol_slider.slider({
      step: 0.01,
      min: 0,
      max: 1,
      change: setVol,
      start: function(event, ui) {
        return user_is_volume_sliding = true;
      },
      stop: function(event, ui) {
        return user_is_volume_sliding = false;
      }
    });
    Util.schedule(100, updateSliderPos);
    $stream_btn.button({
      icons: {
        primary: "ui-icon-signal-diag"
      }
    });
    $stream_btn.on('click', toggleStreamStatus);
    $lib_tabs.on('mouseover', 'li', function(event) {
      return $(this).addClass('ui-state-hover');
    });
    $lib_tabs.on('mouseout', 'li', function(event) {
      return $(this).removeClass('ui-state-hover');
    });
    tabs = ['library', 'upload', 'chat', 'settings'];
    unselectTabs = function() {
      var tab, _i, _len, _results;
      $lib_tabs.find('li').removeClass('ui-state-active');
      _results = [];
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        _results.push($("#" + tab + "-tab").hide());
      }
      return _results;
    };
    clickTab = function(name) {
      if (name === 'upload' && !(server_status != null ? server_status.upload_enabled : void 0)) {
        return;
      }
      unselectTabs();
      $lib_tabs.find("li." + name + "-tab").addClass('ui-state-active');
      $("#" + name + "-tab").show();
      handleResize();
      if (name === 'chat') return renderChat();
    };
    _fn2 = function(tab) {
      return $lib_tabs.on('click', "li." + tab + "-tab", function(event) {
        return clickTab(tab);
      });
    };
    for (_i = 0, _len = tabs.length; _i < _len; _i++) {
      tab = tabs[_i];
      _fn2(tab);
    }
    uploader = new qq.FileUploader({
      element: document.getElementById("upload-widget"),
      action: '/upload',
      encoding: 'multipart'
    });
    $settings.on('click', '.signout', function(event) {
      if (typeof localStorage !== "undefined" && localStorage !== null) {
        delete localStorage.lastfm_username;
      }
      if (typeof localStorage !== "undefined" && localStorage !== null) {
        delete localStorage.lastfm_session_key;
      }
      if (typeof localStorage !== "undefined" && localStorage !== null) {
        delete localStorage.lastfm_scrobbling_on;
      }
      renderSettings();
      return false;
    });
    $settings.on('click', '#toggle-scrobble', function(event) {
      var msg, params, value;
      value = $(this).prop("checked");
      if (value) {
        msg = 'LastfmScrobblersAdd';
        if (typeof localStorage !== "undefined" && localStorage !== null) {
          localStorage.lastfm_scrobbling_on = true;
        }
      } else {
        msg = 'LastfmScrobblersRemove';
        if (typeof localStorage !== "undefined" && localStorage !== null) {
          delete localStorage.lastfm_scrobbling_on;
        }
      }
      params = {
        username: typeof localStorage !== "undefined" && localStorage !== null ? localStorage.lastfm_username : void 0,
        session_key: typeof localStorage !== "undefined" && localStorage !== null ? localStorage.lastfm_session_key : void 0
      };
      socket.emit(msg, JSON.stringify(params));
      renderSettings();
      return false;
    });
    $settings.on('click', '.auth-edit', function(event) {
      var $text_box, _ref;
      settings_ui.auth.show_edit = true;
      renderSettings();
      $text_box = $("#auth-password");
      return $text_box.focus().val((_ref = typeof localStorage !== "undefined" && localStorage !== null ? localStorage.auth_password : void 0) != null ? _ref : "").select();
    });
    $settings.on('click', '.auth-clear', function(event) {
      if (typeof localStorage !== "undefined" && localStorage !== null) {
        delete localStorage.auth_password;
      }
      return renderSettings();
    });
    $settings.on('click', '.auth-save', function(event) {
      return settingsAuthSave();
    });
    $settings.on('click', '.auth-cancel', function(event) {
      return settingsAuthCancel();
    });
    return $settings.on('keydown', '#auth-password', function(event) {
      var $text_box;
      $text_box = $(this);
      event.stopPropagation();
      settings_ui.auth.password = $text_box.val();
      if (event.which === 27) {
        return settingsAuthCancel();
      } else if (event.which === 13) {
        return settingsAuthSave();
      }
    });
  };

  initHandlebars = function() {
    Handlebars.registerHelper('time', Util.formatTime);
    Handlebars.registerHelper('artistid', function(s) {
      return "lib-artist-" + (Util.toHtmlId(mpd.artistKey(s)));
    });
    Handlebars.registerHelper('albumid', function(s) {
      return "lib-album-" + (Util.toHtmlId(s));
    });
    return Handlebars.registerHelper('trackid', function(s) {
      return "lib-track-" + (Util.toHtmlId(s));
    });
  };

  handleResize = function() {
    var $left_window, $lib_header, $pl_header, $pl_window, second_layer_top, tab_contents_height;
    $nowplaying = $("#nowplaying");
    $left_window = $("#left-window");
    $pl_window = $("#playlist-window");
    $nowplaying.width(MARGIN);
    $pl_window.height(MARGIN);
    $left_window.height(MARGIN);
    $nowplaying.width($document.width() - MARGIN * 2);
    second_layer_top = $nowplaying.offset().top + $nowplaying.height() + MARGIN;
    $left_window.offset({
      left: MARGIN,
      top: second_layer_top
    });
    $pl_window.offset({
      left: $left_window.offset().left + $left_window.width() + MARGIN,
      top: second_layer_top
    });
    $pl_window.width($(window).width() - $pl_window.offset().left - MARGIN);
    $left_window.height($(window).height() - $left_window.offset().top);
    $pl_window.height($left_window.height() - MARGIN);
    $lib_header = $("#library-tab .window-header");
    $library.height($left_window.height() - $lib_header.position().top - $lib_header.height() - MARGIN);
    tab_contents_height = $left_window.height() - $lib_tabs.height() - MARGIN;
    $("#upload").height(tab_contents_height);
    resizeChat();
    $pl_header = $pl_window.find("#playlist .header");
    return $playlist_items.height($pl_window.height() - $pl_header.position().top - $pl_header.height());
  };

  resizeChat = function() {
    var height_overshoot;
    height_overshoot = $("#chat-tab").height() - $("#upload").height();
    return $chat_list.height($chat_list.height() - height_overshoot);
  };

  initStreaming = function() {
    return soundManager.setup({
      url: "/vendor/soundmanager2/",
      flashVersion: 9,
      debugMode: false
    });
  };

  window.WEB_SOCKET_SWF_LOCATION = "/public/vendor/socket.io/WebSocketMain.swf";

  $document.ready(function() {
    var refreshPage, token, _ref;
    socket = io.connect();
    if ((token = (_ref = Util.parseQuery(location.search.substring(1))) != null ? _ref.token : void 0) != null) {
      socket.emit('LastfmGetSession', token);
      refreshPage = function() {
        return location.href = "" + location.protocol + "//" + location.host + "/";
      };
      socket.on('LastfmGetSessionSuccess', function(data) {
        var params;
        params = JSON.parse(data);
        if (typeof localStorage !== "undefined" && localStorage !== null) {
          localStorage.lastfm_username = params.session.name;
        }
        if (typeof localStorage !== "undefined" && localStorage !== null) {
          localStorage.lastfm_session_key = params.session.key;
        }
        if (typeof localStorage !== "undefined" && localStorage !== null) {
          delete localStorage.lastfm_scrobbling_on;
        }
        return refreshPage();
      });
      socket.on('LastfmGetSessionError', function(data) {
        var params;
        params = JSON.parse(data);
        alert("Error authenticating: " + params.message);
        return refreshPage();
      });
      return;
    }
    socket.on('Identify', function(data) {
      var user_name;
      my_user_id = data.toString();
      my_user_ids[my_user_id] = 1;
      storeMyUserIds();
      if ((user_name = typeof localStorage !== "undefined" && localStorage !== null ? localStorage.user_name : void 0) != null) {
        return setUserName(user_name);
      }
    });
    socket.on('Permissions', function(data) {
      permissions = JSON.parse(data.toString());
      return renderSettings();
    });
    socket.on('Status', function(data) {
      server_status = JSON.parse(data.toString());
      storeMyUserIds();
      renderPlaylistButtons();
      renderChat();
      labelPlaylistItems();
      renderSettings();
      return window._debug_server_status = server_status;
    });
    mpd = new window.SocketMpd(socket);
    mpd.on('error', function(msg) {
      return alert(msg);
    });
    mpd.on('libraryupdate', function() {
      return renderLibrary();
    });
    mpd.on('playlistupdate', renderPlaylist);
    mpd.on('statusupdate', function() {
      renderNowPlaying();
      renderPlaylistButtons();
      labelPlaylistItems();
      return updateStreamingPlayer();
    });
    mpd.on('chat', renderChat);
    mpd.on('connect', function() {
      sendAuth();
      mpd_alive = true;
      return render();
    });
    socket.on('disconnect', function() {
      mpd_alive = false;
      return render();
    });
    socket.on('MpdDisconnect', function() {
      mpd_alive = false;
      return render();
    });
    setUpUi();
    initHandlebars();
    initStreaming();
    render();
    $(window).resize(handleResize);
    return window._debug_mpd = mpd;
  });

}).call(this);
