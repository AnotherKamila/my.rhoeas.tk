
exports.parse = function(file_contents) {
  var audio_output, audio_outputs, key, line, new_obj, obj, parts, stack, val, _i, _j, _len, _len2, _ref;
  obj = {};
  stack = [];
  audio_outputs = [];
  _ref = file_contents.split("\n");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    line = _ref[_i];
    line = line.trim();
    if (line.length === 0) continue;
    if (line.substring(0, 1) === "#") continue;
    if (line.substring(0, 1) === "}") {
      obj = stack.pop();
    } else {
      parts = line.match(/([^\s]*)\s+([^#]*)/);
      key = parts[1];
      val = parts[2];
      if (val === "{") {
        stack.push(obj);
        if (key === 'audio_output') {
          audio_outputs.push(new_obj = {});
        } else {
          obj[key] = new_obj = {};
        }
        obj = new_obj;
      } else {
        val = JSON.parse(val);
        if (key === 'bind_to_address') {
          if (obj[key] == null) obj[key] = {};
          if (val[0] === '/') {
            obj[key].unix_socket = val;
          } else {
            obj[key].network = val;
          }
        } else if (key === 'password') {
          (obj[key] || (obj[key] = [])).push(val);
        } else {
          obj[key] = val;
        }
      }
    }
  }
  obj.audio_output = {};
  for (_j = 0, _len2 = audio_outputs.length; _j < _len2; _j++) {
    audio_output = audio_outputs[_j];
    obj.audio_output[audio_output.type] = audio_output;
  }
  return obj;
};
