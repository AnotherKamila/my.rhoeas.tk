var Plugin, Upload, bad_file_chars, c, fileEscape, formidable, fs, getSuggestedPath, mkdirp, mpd, path, stripFilename, url, util, zfill, _i, _len, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = Object.prototype.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Plugin = require('../plugin').Plugin;

mpd = require('../mpd');

url = require('url');

formidable = require('formidable');

util = require('util');

mkdirp = require('mkdirp');

fs = require('fs');

path = require('path');

bad_file_chars = {};

_ref = '/\\?%*:|"<>';
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  c = _ref[_i];
  bad_file_chars[c] = "_";
}

fileEscape = function(filename) {
  var c, out, _j, _len2, _ref2;
  out = "";
  for (_j = 0, _len2 = filename.length; _j < _len2; _j++) {
    c = filename[_j];
    out += (_ref2 = bad_file_chars[c]) != null ? _ref2 : c;
  }
  return out;
};

zfill = function(n) {
  return (n < 10 ? "0" : "") + n;
};

getSuggestedPath = function(track, default_name) {
  var ext, _path;
  if (default_name == null) default_name = mpd.trackNameFromFile(track.file);
  _path = "";
  if (track.album_artist_name) {
    _path += "" + (fileEscape(track.album_artist_name)) + "/";
  }
  if (track.album_name) _path += "" + (fileEscape(track.album_name)) + "/";
  if (track.track) _path += "" + (fileEscape(zfill(track.track))) + " ";
  ext = path.extname(track.file);
  if (track.name === mpd.trackNameFromFile(track.file)) {
    _path += fileEscape(default_name);
  } else {
    _path += fileEscape(track.name);
    _path += ext;
  }
  return _path;
};

stripFilename = function(_path) {
  var parts;
  parts = _path.split('/');
  return parts.slice(0, (parts.length - 1)).join('/');
};

exports.Plugin = Upload = (function(_super) {

  __extends(Upload, _super);

  function Upload() {
    this.moveFile = __bind(this.moveFile, this);
    this.flushWantToQueue = __bind(this.flushWantToQueue, this);
    this.queueFilesPos = __bind(this.queueFilesPos, this);
    this.onSendStatus = __bind(this.onSendStatus, this);
    this.handleRequest = __bind(this.handleRequest, this);
    this.setMpd = __bind(this.setMpd, this);
    this.setConf = __bind(this.setConf, this);
    this.saveState = __bind(this.saveState, this);
    this.restoreState = __bind(this.restoreState, this);    Upload.__super__.constructor.apply(this, arguments);
    this.is_enabled = false;
    this.random_ids = null;
  }

  Upload.prototype.restoreState = function(state) {
    var _ref2;
    return this.want_to_queue = (_ref2 = state.want_to_queue) != null ? _ref2 : [];
  };

  Upload.prototype.saveState = function(state) {
    state.want_to_queue = this.want_to_queue;
    return state.status.upload_enabled = this.is_enabled;
  };

  Upload.prototype.setConf = function(conf, conf_path) {
    var _ref2, _ref3;
    this.is_enabled = true;
    if (((_ref2 = conf.bind_to_address) != null ? _ref2.unix_socket : void 0) == null) {
      this.is_enabled = false;
      this.log.warn("bind_to_address does not have a unix socket enabled in " + conf_path + ". Uploading disabled.");
    }
    if (((_ref3 = conf.bind_to_address) != null ? _ref3.network : void 0) !== "localhost") {
      this.is_enabled = false;
      this.log.warn("bind_to_address does not have a definition that is 'localhost' in " + conf_path + ". Uploading disabled.");
    }
    if (conf.music_directory != null) {
      this.music_lib_path = conf.music_directory;
      if (this.music_lib_path.substring(this.music_lib_path.length - 1, 1) !== '/') {
        return this.music_lib_path += '/';
      }
    } else {
      this.is_enabled = false;
      return this.log.warn("music directory not found in " + conf_path + ". Uploading disabled.");
    }
  };

  Upload.prototype.setMpd = function(mpd) {
    this.mpd = mpd;
    return this.mpd.on('libraryupdate', this.flushWantToQueue);
  };

  Upload.prototype.handleRequest = function(request, response) {
    var form, parsed_url,
      _this = this;
    parsed_url = url.parse(request.url);
    if (!(parsed_url.pathname === '/upload' && request.method === 'POST')) {
      return false;
    }
    if (!this.is_enabled) {
      response.writeHead(500, {
        'content-type': 'text/plain'
      });
      response.end(JSON.stringify({
        success: false,
        reason: "Uploads disabled"
      }));
      return true;
    }
    form = new formidable.IncomingForm();
    form.parse(request, function(err, fields, file) {
      var tmp_with_ext;
      tmp_with_ext = file.qqfile.path + path.extname(file.qqfile.filename);
      return _this.moveFile(file.qqfile.path, tmp_with_ext, function() {
        return _this.mpd.getFileInfo("file://" + tmp_with_ext, function(track) {
          var dest, suggested_path;
          suggested_path = getSuggestedPath(track, file.qqfile.filename);
          dest = _this.music_lib_path + suggested_path;
          return mkdirp(stripFilename(dest), function(err) {
            if (err) {
              return _this.log.error(err);
            } else {
              return _this.moveFile(tmp_with_ext, dest, function() {
                _this.want_to_queue.push(suggested_path);
                _this.onStateChanged();
                return _this.log.info("Track was uploaded: " + dest);
              });
            }
          });
        });
      });
    });
    response.writeHead(200, {
      'content-type': 'text/html'
    });
    response.end(JSON.stringify({
      success: true
    }));
    return true;
  };

  Upload.prototype.onSendStatus = function(status) {
    return this.random_ids = status != null ? status.random_ids : void 0;
  };

  Upload.prototype.queueFilesPos = function() {
    var i, item, pos, _len2, _ref2;
    pos = this.mpd.playlist.item_list.length;
    if (this.random_ids == null) return pos;
    _ref2 = this.mpd.playlist.item_list;
    for (i = 0, _len2 = _ref2.length; i < _len2; i++) {
      item = _ref2[i];
      if (this.random_ids[item.id] != null) return i;
    }
  };

  Upload.prototype.flushWantToQueue = function() {
    var file, files, i;
    i = 0;
    files = [];
    while (i < this.want_to_queue.length) {
      file = this.want_to_queue[i];
      if (this.mpd.library.track_table[file] != null) {
        files.push(file);
        this.want_to_queue.splice(i, 1);
      } else {
        i++;
      }
    }
    this.mpd.queueFiles(files, this.queueFilesPos());
    if (files.length) return this.onStateChanged();
  };

  Upload.prototype.moveFile = function(source, dest, cb) {
    var in_stream, out_stream,
      _this = this;
    if (cb == null) cb = function() {};
    in_stream = fs.createReadStream(source);
    out_stream = fs.createWriteStream(dest);
    out_stream.on('error', function(error) {
      return _this.log.error(error);
    });
    return util.pump(in_stream, out_stream, function() {
      return fs.unlink(source, cb);
    });
  };

  return Upload;

})(Plugin);
