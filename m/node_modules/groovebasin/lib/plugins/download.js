// Generated by CoffeeScript 1.3.3
var Download, Plugin, fs, url, walk, windowsSafePath, zipstream,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Plugin = require('../plugin').Plugin;

fs = require('fs');

url = require('url');

zipstream = require('zipstream');

exports.Plugin = Download = (function(_super) {

  __extends(Download, _super);

  function Download() {
    this.setConf = __bind(this.setConf, this);

    this.saveState = __bind(this.saveState, this);
    Download.__super__.constructor.apply(this, arguments);
    this.is_enabled = false;
  }

  Download.prototype.saveState = function(state) {
    return state.status.download_enabled = this.is_enabled;
  };

  Download.prototype.setConf = function(conf, conf_path) {
    var library_link;
    this.is_enabled = true;
    if (conf.music_directory == null) {
      this.is_enabled = false;
      this.log.warn("music_directory not found in " + conf_path + ". Download disabled.");
      return;
    }
    library_link = "./public/library";
    try {
      fs.unlinkSync(library_link);
    } catch (_error) {}
    try {
      fs.symlinkSync(conf.music_directory, library_link);
    } catch (error) {
      this.is_enabled = false;
      this.log.warn("Unable to link public/library to " + conf.music_directory + ": " + error + ". Download disabled.");
      return;
    }
    try {
      return fs.readdirSync(library_link);
    } catch (error) {
      this.is_enabled = false;
      this.log.warn("Unable to access music directory: " + error + ". Download disabled.");
    }
  };

  Download.prototype.handleRequest = function(request, response) {
    var match, prefix, relative_path, request_path, zip_name;
    request_path = decodeURI(url.parse(request.url).pathname);
    if (request_path === "/library/") {
      relative_path = "";
      zip_name = "library.zip";
    } else if ((match = request_path.match(/^\/library\/(.*)\/$/)) != null) {
      relative_path = "/" + match[1];
      zip_name = windowsSafePath(match[1].replace(/\//g, " - ")) + ".zip";
    }
    if (relative_path == null) {
      return false;
    }
    this.log.debug("request to download a library directory: " + relative_path);
    prefix = "./public/library";
    walk(prefix + relative_path, function(err, files) {
      var i, nextFile, zip;
      if (err) {
        response.writeHead(404, {});
        response.end();
        return;
      }
      response.writeHead(200, {
        "Content-Type": "application/zip",
        "Content-Disposition": "attachment; filename=" + zip_name
      });
      zip = zipstream.createZip({});
      zip.pipe(response);
      i = 0;
      nextFile = function() {
        var file_path, options;
        file_path = files[i++];
        if (file_path != null) {
          options = {
            "name": file_path.substr(prefix.length + 1),
            "store": true
          };
          return zip.addFile(fs.createReadStream(file_path), options, nextFile);
        } else {
          return zip.finalize(function() {
            return response.end();
          });
        }
      };
      return nextFile();
    });
    return true;
  };

  return Download;

})(Plugin);

walk = function(dir, done) {
  var results;
  results = [];
  return fs.readdir(dir, function(err, list) {
    var i, next;
    if (err != null) {
      return done(err);
    }
    i = 0;
    next = function() {
      var file;
      file = list[i++];
      if (file == null) {
        return done(null, results);
      }
      file = dir + '/' + file;
      return fs.stat(file, function(err, stat) {
        if (stat != null ? stat.isDirectory() : void 0) {
          return walk(file, function(err, res) {
            results = results.concat(res);
            return next();
          });
        } else {
          results.push(file);
          return next();
        }
      });
    };
    return next();
  });
};

windowsSafePath = function(string) {
  return string.replace(/<|>|:|"|\/|\\|\||\?|\*/g, "_");
};
