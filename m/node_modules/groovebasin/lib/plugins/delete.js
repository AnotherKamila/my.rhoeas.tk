var Plugin, fs, path,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = Object.prototype.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

Plugin = require('../plugin').Plugin;

exports.Plugin = (function(_super) {

  __extends(_Class, _super);

  function _Class() {
    this.setConf = __bind(this.setConf, this);
    this.setMpd = __bind(this.setMpd, this);
    this.onSocketConnection = __bind(this.onSocketConnection, this);
    this.saveState = __bind(this.saveState, this);    _Class.__super__.constructor.apply(this, arguments);
  }

  _Class.prototype.saveState = function(state) {
    return state.status.delete_enabled = this.is_enabled;
  };

  _Class.prototype.onSocketConnection = function(socket, getPermissions) {
    var _this = this;
    return socket.on('DeleteFromLibrary', function(data) {
      var file, files, next;
      if (!getPermissions().admin) {
        _this.log.warn("User without admin permission trying to delete songs");
        return;
      }
      files = JSON.parse(data.toString());
      file = null;
      next = function(err) {
        if (err) {
          _this.log.error("deleting " + file + ": " + (err.toString()));
        } else if (file != null) {
          _this.log.info("deleted " + file);
        }
        if (!((file = files.shift()) != null)) {
          return _this.mpd.scanFiles(files);
        } else {
          return fs.unlink(path.join(_this.music_lib_path, file), next);
        }
      };
      return next();
    });
  };

  _Class.prototype.setMpd = function(mpd) {
    this.mpd = mpd;
  };

  _Class.prototype.setConf = function(conf, conf_path) {
    if (conf.music_directory != null) {
      return this.music_lib_path = conf.music_directory;
    } else {
      this.is_enabled = false;
      return this.log.warn("Delete disabled - music directory not found in " + conf_path);
    }
  };

  return _Class;

})(Plugin);
