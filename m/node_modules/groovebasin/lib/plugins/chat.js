var Chat, Plugin,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = Object.prototype.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Plugin = require('../plugin').Plugin;

exports.Plugin = Chat = (function(_super) {

  __extends(Chat, _super);

  function Chat() {
    this.scrubStaleUserNames = __bind(this.scrubStaleUserNames, this);
    this.onSocketConnection = __bind(this.onSocketConnection, this);
    this.setMpd = __bind(this.setMpd, this);
    this.saveState = __bind(this.saveState, this);
    this.restoreState = __bind(this.restoreState, this);    Chat.__super__.constructor.apply(this, arguments);
    this.users = [];
  }

  Chat.prototype.restoreState = function(state) {
    var _ref, _ref2, _ref3;
    this.next_user_id = (_ref = state.next_user_id) != null ? _ref : 0;
    this.user_names = (_ref2 = state.status.user_names) != null ? _ref2 : {};
    return this.chats = (_ref3 = state.status.chats) != null ? _ref3 : [];
  };

  Chat.prototype.saveState = function(state) {
    state.next_user_id = this.next_user_id;
    state.status.users = this.users;
    state.status.user_names = this.user_names;
    return state.status.chats = this.chats;
  };

  Chat.prototype.setMpd = function(mpd) {
    this.mpd = mpd;
    return this.mpd.on('chat', this.scrubStaleUserNames);
  };

  Chat.prototype.onSocketConnection = function(socket) {
    var user_id,
      _this = this;
    user_id = "user_" + this.next_user_id;
    this.next_user_id += 1;
    this.users.push(user_id);
    socket.emit('Identify', user_id);
    socket.on('Chat', function(data) {
      var chat_object, chats_limit;
      chat_object = {
        user_id: user_id,
        message: data.toString()
      };
      _this.chats.push(chat_object);
      chats_limit = 100;
      if (_this.chats.length > chats_limit) {
        _this.chats.splice(0, _this.chats.length - chats_limit);
      }
      return _this.onStatusChanged();
    });
    socket.on('SetUserName', function(data) {
      var user_name, user_name_limit;
      user_name = data.toString().trim().split(/\s+/).join(" ");
      if (user_name !== "") {
        user_name_limit = 20;
        user_name = user_name.substr(0, user_name_limit);
        _this.user_names[user_id] = user_name;
      } else {
        delete _this.user_names[user_id];
      }
      return _this.onStatusChanged();
    });
    socket.on('disconnect', function() {
      var id;
      _this.users = (function() {
        var _i, _len, _ref, _results;
        _ref = this.users;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          if (id !== user_id) _results.push(id);
        }
        return _results;
      }).call(_this);
      return _this.scrubStaleUserNames();
    });
    return this.onStatusChanged();
  };

  Chat.prototype.scrubStaleUserNames = function() {
    var chat_object, copy, keep_user_ids, user_id, _i, _j, _len, _len2, _ref, _ref2;
    keep_user_ids = {};
    _ref = this.users;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      user_id = _ref[_i];
      keep_user_ids[user_id] = true;
    }
    _ref2 = this.chats;
    for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
      chat_object = _ref2[_j];
      keep_user_ids[chat_object.user_id] = true;
    }
    this.log.debug("keep_ids " + ((function() {
      var _results;
      _results = [];
      for (copy in keep_user_ids) {
        _results.push(copy);
      }
      return _results;
    })()));
    for (user_id in this.user_names) {
      if (!keep_user_ids[user_id]) delete this.user_names[user_id];
    }
    return this.onStatusChanged();
  };

  return Chat;

})(Plugin);
