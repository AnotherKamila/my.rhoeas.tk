var Plugin, Stream,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = Object.prototype.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Plugin = require('../plugin').Plugin;

exports.Plugin = Stream = (function(_super) {

  __extends(Stream, _super);

  function Stream() {
    this.setConf = __bind(this.setConf, this);
    this.saveState = __bind(this.saveState, this);    Stream.__super__.constructor.apply(this, arguments);
    this.port = null;
    this.format = null;
    this.is_enabled = false;
  }

  Stream.prototype.saveState = function(state) {
    state.status.stream_httpd_port = this.port;
    return state.status.stream_httpd_format = this.format;
  };

  Stream.prototype.setConf = function(conf, conf_path) {
    var httpd, _ref;
    this.is_enabled = true;
    if ((httpd = (_ref = conf.audio_output) != null ? _ref.httpd : void 0) != null) {
      this.port = httpd.port;
      if (httpd.encoder === 'lame') {
        this.format = 'mp3';
        if (httpd.quality != null) {
          this.log.warn("Use audio_output.bitrate for setting quality when using mp3 streaming in " + conf_path);
        }
      } else if (httpd.encoder === 'vorbis') {
        this.format = 'ogg';
        if (httpd.bitrate != null) {
          this.log.warn("Use audio_output.quality for setting quality when using vorbis streaming in " + conf_path);
        }
      } else {
        this.format = 'unknown';
      }
      if (httpd.format !== "44100:16:2") {
        return this.log.warn("Recommended 44100:16:2 for audio_output.format in " + conf_path);
      }
    } else {
      this.is_enabled = false;
      return this.log.warn("httpd audio_output not enabled in " + conf_path + ". Streaming disabled.");
    }
  };

  return Stream;

})(Plugin);
